/*
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.multimodeldesc.ide.contentassist.antlr;

import at.ac.tuwien.big.multimodeldesc.ide.contentassist.antlr.internal.InternalMMDescParser;
import at.ac.tuwien.big.multimodeldesc.services.MMDescGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MMDescParser extends AbstractContentAssistParser {

	@Inject
	private MMDescGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMMDescParser createParser() {
		InternalMMDescParser result = new InternalMMDescParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPointDescAccess().getAlternatives_3(), "rule__PointDesc__Alternatives_3");
					put(grammarAccess.getPointDescAccess().getAlternatives_3_1_1_1(), "rule__PointDesc__Alternatives_3_1_1_1");
					put(grammarAccess.getModelRefAccess().getAlternatives_3_1(), "rule__ModelRef__Alternatives_3_1");
					put(grammarAccess.getMMDescAccess().getGroup(), "rule__MMDesc__Group__0");
					put(grammarAccess.getPointDescAccess().getGroup(), "rule__PointDesc__Group__0");
					put(grammarAccess.getPointDescAccess().getGroup_3_1(), "rule__PointDesc__Group_3_1__0");
					put(grammarAccess.getPointDescAccess().getGroup_3_1_1(), "rule__PointDesc__Group_3_1_1__0");
					put(grammarAccess.getModelRefAccess().getGroup(), "rule__ModelRef__Group__0");
					put(grammarAccess.getModelRefAccess().getGroup_3(), "rule__ModelRef__Group_3__0");
					put(grammarAccess.getModelRefAccess().getGroup_4(), "rule__ModelRef__Group_4__0");
					put(grammarAccess.getModelViewAccess().getGroup(), "rule__ModelView__Group__0");
					put(grammarAccess.getModelViewAccess().getGroup_3(), "rule__ModelView__Group_3__0");
					put(grammarAccess.getModelViewAccess().getGroup_3_1(), "rule__ModelView__Group_3_1__0");
					put(grammarAccess.getMMDescAccess().getPointDescAssignment_0(), "rule__MMDesc__PointDescAssignment_0");
					put(grammarAccess.getMMDescAccess().getModelsAssignment_1(), "rule__MMDesc__ModelsAssignment_1");
					put(grammarAccess.getMMDescAccess().getViewAssignment_2(), "rule__MMDesc__ViewAssignment_2");
					put(grammarAccess.getPointDescAccess().getTypeAssignment_3_0(), "rule__PointDesc__TypeAssignment_3_0");
					put(grammarAccess.getPointDescAccess().getTypeAssignment_3_1_0(), "rule__PointDesc__TypeAssignment_3_1_0");
					put(grammarAccess.getPointDescAccess().getTypeAssignment_3_1_1_1_0(), "rule__PointDesc__TypeAssignment_3_1_1_1_0");
					put(grammarAccess.getPointDescAccess().getTypeAssignment_3_1_1_1_1(), "rule__PointDesc__TypeAssignment_3_1_1_1_1");
					put(grammarAccess.getModelRefAccess().getIdAssignment_1(), "rule__ModelRef__IdAssignment_1");
					put(grammarAccess.getModelRefAccess().getUriAssignment_2(), "rule__ModelRef__UriAssignment_2");
					put(grammarAccess.getModelRefAccess().getDataAssignment_3_1_0(), "rule__ModelRef__DataAssignment_3_1_0");
					put(grammarAccess.getModelRefAccess().getNextAssignment_4_1(), "rule__ModelRef__NextAssignment_4_1");
					put(grammarAccess.getModelRefAccess().getContinueAssignment_5(), "rule__ModelRef__ContinueAssignment_5");
					put(grammarAccess.getModelViewAccess().getViewedAssignment_3_0(), "rule__ModelView__ViewedAssignment_3_0");
					put(grammarAccess.getModelViewAccess().getViewedAssignment_3_1_1(), "rule__ModelView__ViewedAssignment_3_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MMDescGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MMDescGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
