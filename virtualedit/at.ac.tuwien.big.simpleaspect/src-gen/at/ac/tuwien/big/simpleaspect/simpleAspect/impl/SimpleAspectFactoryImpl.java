/**
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.simpleaspect.simpleAspect.impl;

import at.ac.tuwien.big.simpleaspect.simpleAspect.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleAspectFactoryImpl extends EFactoryImpl implements SimpleAspectFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SimpleAspectFactory init()
  {
    try
    {
      SimpleAspectFactory theSimpleAspectFactory = (SimpleAspectFactory)EPackage.Registry.INSTANCE.getEFactory(SimpleAspectPackage.eNS_URI);
      if (theSimpleAspectFactory != null)
      {
        return theSimpleAspectFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SimpleAspectFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleAspectFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SimpleAspectPackage.ASPECT: return createAspect();
      case SimpleAspectPackage.FOREIGN_ATTRIBUTE: return createForeignAttribute();
      case SimpleAspectPackage.POINTCUT: return createPointcut();
      case SimpleAspectPackage.POINTCUT_CONDITION: return createPointcutCondition();
      case SimpleAspectPackage.UNARY_POINTCUT_CONDITION: return createUnaryPointcutCondition();
      case SimpleAspectPackage.BINARY_POINTCUT_CONDITION: return createBinaryPointcutCondition();
      case SimpleAspectPackage.SIMPLE_POINTCUT_CONDITION: return createSimplePointcutCondition();
      case SimpleAspectPackage.POINTCUT_METHOD_FILTER: return createPointcutMethodFilter();
      case SimpleAspectPackage.POINTCUT_TYPE_FILTER: return createPointcutTypeFilter();
      case SimpleAspectPackage.ADVICE: return createAdvice();
      case SimpleAspectPackage.POINTCUT_REF: return createPointcutRef();
      case SimpleAspectPackage.PARAMETER: return createParameter();
      case SimpleAspectPackage.TYPE: return createType();
      case SimpleAspectPackage.METHOD: return createMethod();
      case SimpleAspectPackage.METHOD_BLOCK: return createMethodBlock();
      case SimpleAspectPackage.SIMPLE_STATEMENT: return createSimpleStatement();
      case SimpleAspectPackage.STATEMENT: return createStatement();
      case SimpleAspectPackage.SIMPLE_VARIABLE_DECLARATION: return createSimpleVariableDeclaration();
      case SimpleAspectPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case SimpleAspectPackage.ASSIGNMENT: return createAssignment();
      case SimpleAspectPackage.IF_STATEMENT: return createIfStatement();
      case SimpleAspectPackage.FOR_STATEMENT: return createForStatement();
      case SimpleAspectPackage.FOR_IN_STATEMENT: return createForInStatement();
      case SimpleAspectPackage.WHILE_STATEMENT: return createWhileStatement();
      case SimpleAspectPackage.RETURN_STATEMENT: return createReturnStatement();
      case SimpleAspectPackage.METHOD_CALL: return createMethodCall();
      case SimpleAspectPackage.GENERIC_EXPRESSION: return createGenericExpression();
      case SimpleAspectPackage.CONSTRUCTOR_CALL: return createConstructorCall();
      case SimpleAspectPackage.CONSTANT_EXPRESSION: return createConstantExpression();
      case SimpleAspectPackage.ASPECT_EXPRESSION: return createAspectExpression();
      case SimpleAspectPackage.NULL_EXPRESSION: return createNullExpression();
      case SimpleAspectPackage.INTEGER_EXPRESSION: return createIntegerExpression();
      case SimpleAspectPackage.BOOLEAN_EXPRESSION: return createBooleanExpression();
      case SimpleAspectPackage.STRING_EXPRESSION: return createStringExpression();
      case SimpleAspectPackage.UNARY_EXPRESSION: return createUnaryExpression();
      case SimpleAspectPackage.VARIABLE_EXPRESSION: return createVariableExpression();
      case SimpleAspectPackage.PARANTHESIS_OR_BINARY_EXPRESSION: return createParanthesisOrBinaryExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Aspect createAspect()
  {
    AspectImpl aspect = new AspectImpl();
    return aspect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForeignAttribute createForeignAttribute()
  {
    ForeignAttributeImpl foreignAttribute = new ForeignAttributeImpl();
    return foreignAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pointcut createPointcut()
  {
    PointcutImpl pointcut = new PointcutImpl();
    return pointcut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointcutCondition createPointcutCondition()
  {
    PointcutConditionImpl pointcutCondition = new PointcutConditionImpl();
    return pointcutCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryPointcutCondition createUnaryPointcutCondition()
  {
    UnaryPointcutConditionImpl unaryPointcutCondition = new UnaryPointcutConditionImpl();
    return unaryPointcutCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryPointcutCondition createBinaryPointcutCondition()
  {
    BinaryPointcutConditionImpl binaryPointcutCondition = new BinaryPointcutConditionImpl();
    return binaryPointcutCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimplePointcutCondition createSimplePointcutCondition()
  {
    SimplePointcutConditionImpl simplePointcutCondition = new SimplePointcutConditionImpl();
    return simplePointcutCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointcutMethodFilter createPointcutMethodFilter()
  {
    PointcutMethodFilterImpl pointcutMethodFilter = new PointcutMethodFilterImpl();
    return pointcutMethodFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointcutTypeFilter createPointcutTypeFilter()
  {
    PointcutTypeFilterImpl pointcutTypeFilter = new PointcutTypeFilterImpl();
    return pointcutTypeFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Advice createAdvice()
  {
    AdviceImpl advice = new AdviceImpl();
    return advice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointcutRef createPointcutRef()
  {
    PointcutRefImpl pointcutRef = new PointcutRefImpl();
    return pointcutRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Method createMethod()
  {
    MethodImpl method = new MethodImpl();
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodBlock createMethodBlock()
  {
    MethodBlockImpl methodBlock = new MethodBlockImpl();
    return methodBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStatement createSimpleStatement()
  {
    SimpleStatementImpl simpleStatement = new SimpleStatementImpl();
    return simpleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleVariableDeclaration createSimpleVariableDeclaration()
  {
    SimpleVariableDeclarationImpl simpleVariableDeclaration = new SimpleVariableDeclarationImpl();
    return simpleVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForInStatement createForInStatement()
  {
    ForInStatementImpl forInStatement = new ForInStatementImpl();
    return forInStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileStatement createWhileStatement()
  {
    WhileStatementImpl whileStatement = new WhileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodCall createMethodCall()
  {
    MethodCallImpl methodCall = new MethodCallImpl();
    return methodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GenericExpression createGenericExpression()
  {
    GenericExpressionImpl genericExpression = new GenericExpressionImpl();
    return genericExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstructorCall createConstructorCall()
  {
    ConstructorCallImpl constructorCall = new ConstructorCallImpl();
    return constructorCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstantExpression createConstantExpression()
  {
    ConstantExpressionImpl constantExpression = new ConstantExpressionImpl();
    return constantExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AspectExpression createAspectExpression()
  {
    AspectExpressionImpl aspectExpression = new AspectExpressionImpl();
    return aspectExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NullExpression createNullExpression()
  {
    NullExpressionImpl nullExpression = new NullExpressionImpl();
    return nullExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegerExpression createIntegerExpression()
  {
    IntegerExpressionImpl integerExpression = new IntegerExpressionImpl();
    return integerExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExpression createBooleanExpression()
  {
    BooleanExpressionImpl booleanExpression = new BooleanExpressionImpl();
    return booleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringExpression createStringExpression()
  {
    StringExpressionImpl stringExpression = new StringExpressionImpl();
    return stringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableExpression createVariableExpression()
  {
    VariableExpressionImpl variableExpression = new VariableExpressionImpl();
    return variableExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParanthesisOrBinaryExpression createParanthesisOrBinaryExpression()
  {
    ParanthesisOrBinaryExpressionImpl paranthesisOrBinaryExpression = new ParanthesisOrBinaryExpressionImpl();
    return paranthesisOrBinaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleAspectPackage getSimpleAspectPackage()
  {
    return (SimpleAspectPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SimpleAspectPackage getPackage()
  {
    return SimpleAspectPackage.eINSTANCE;
  }

} //SimpleAspectFactoryImpl
