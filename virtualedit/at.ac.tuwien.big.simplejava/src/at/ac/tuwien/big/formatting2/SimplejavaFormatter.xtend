/*
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.formatting2

import at.ac.tuwien.big.services.SimplejavaGrammarAccess
import at.ac.tuwien.big.simplejava.ClassDeclaration
import at.ac.tuwien.big.simplejava.Import
import at.ac.tuwien.big.simplejava.Method
import at.ac.tuwien.big.simplejava.Parameter
import at.ac.tuwien.big.simplejava.SimpleJava
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import at.ac.tuwien.big.simplejava.ParanthesisOrBinaryExpression
import at.ac.tuwien.big.simplejava.UnaryExpression
import at.ac.tuwien.big.simplejava.MethodCall
import at.ac.tuwien.big.simplejava.ReturnStatement
import at.ac.tuwien.big.simplejava.WhileStatement
import at.ac.tuwien.big.simplejava.ForInStatement
import at.ac.tuwien.big.simplejava.ForStatement
import at.ac.tuwien.big.simplejava.IfStatement
import at.ac.tuwien.big.simplejava.Assignment
import at.ac.tuwien.big.simplejava.VariableDeclaration
import at.ac.tuwien.big.simplejava.MethodBlock
import at.ac.tuwien.big.simplejava.SimplejavaPackage

class SimplejavaFormatter extends AbstractFormatter2 {
	
	@Inject extension SimplejavaGrammarAccess

	def dispatch void format(SimpleJava simpleJava, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		simpleJava.getPackage.format;
		for (Import imports : simpleJava.getImports()) {
			imports.format;
		}
		simpleJava.getClazz.format;
	}

	def dispatch void format(ClassDeclaration classDeclaration, extension IFormattableDocument document) {
		var open = classDeclaration.regionFor.keyword("{")
		open.append[setNewLines(1,1,3)]
		var close = classDeclaration.regionFor.keyword("}")
		close.prepend[setNewLines(1,1,3)]
		interior(
			open,
			close,
			[indent]
		) 
		classDeclaration.regionFor.keyword(";").append[setNewLines(1,1,3)];
		classDeclaration.regionFor.keyword(";").prepend[noSpace];
		for (Parameter attribute : classDeclaration.getAttribute()) {
			attribute.prepend[setNewLines(1,1,3)]
			attribute.append[setNewLines(1,1,3)]
			attribute.format;
		}
		for (Method method : classDeclaration.getMethod()) {
			
			method.format;
		}
	}
	
	// TODO: implement for Parameter, Method, MethodBlock, VariableDeclaration, Assignment, IfStatement, ForStatement,
	// ForInStatement, WhileStatement, ReturnStatement, MethodCall, UnaryExpression, ParanthesisOrBinaryExpression
	
	def dispatch void format(Parameter classDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		classDeclaration.append[noSpace]
	} 
	
	def dispatch void format(Method method, extension IFormattableDocument document) {
		method.prepend[setNewLines(1,1,3)]
		method.append[setNewLines(1,1,3)]
		method.content.format	
	}
	
	def dispatch void format(MethodBlock method, extension IFormattableDocument document) {
		var open = method.regionFor.keyword("{")
		open.append[setNewLines(1,1,3)]
		var close = method.regionFor.keyword("}")
		interior(
			open,
			close,
			[indent]
		)
		for (statement: method.statements) {
			statement.format
		} 
		
	}
	
	def dispatch void format(VariableDeclaration classDeclaration, extension IFormattableDocument document) {
		classDeclaration.regionFor.keyword(";").prepend[noSpace].append[setNewLines(1,1,3)]
	}
	
	def dispatch void format(Assignment classDeclaration, extension IFormattableDocument document) {
		classDeclaration.regionFor.keyword(";").prepend[noSpace].append[setNewLines(1,1,3)] 
		
	}
	def dispatch void format(IfStatement classDeclaration, extension IFormattableDocument document) {
		classDeclaration.condition.format
		classDeclaration.then.format 
		if (classDeclaration.^else != null) {
			classDeclaration.^else.format
		}
		
	}
	def dispatch void format(ForStatement classDeclaration, extension IFormattableDocument document) {
		classDeclaration.body.format
	}
	def dispatch void format(ForInStatement classDeclaration, extension IFormattableDocument document) {
		classDeclaration.body.format
		
	}
	def dispatch void format(WhileStatement classDeclaration, extension IFormattableDocument document) {
		classDeclaration.body.format
	}
	
	def dispatch void format(ReturnStatement classDeclaration, extension IFormattableDocument document) {
		classDeclaration.regionFor.keyword(";").immediatelyPreceding
		classDeclaration.regionFor.keyword(";").append[setNewLines(1,1,3)]
		
	}
	
	def dispatch void format(MethodCall classDeclaration, extension IFormattableDocument document) {
		/*
MethodCall:
	(((object=[Parameter|QualifiedName]|thisObject?='this') '.')? (method=[Method|ID] | methodName=('equals'|'hashCode'))
		| (methodName='System.out.println')
	)
		 '(' (parameter+=GenericExpression (',' parameter+= GenericExpression)* )? ')' ';'
;
		 */
		classDeclaration.regionFor.keyword(".").prepend[noSpace]
		classDeclaration.regionFor.keyword(".").append[noSpace]
		classDeclaration.regionFor.keyword("(").prepend[noSpace]
		classDeclaration.regionFor.keyword("(").append[noSpace]
		if (classDeclaration.method != null) {
			classDeclaration.method.prepend[noSpace]
			classDeclaration.method.append[noSpace]
		}
		classDeclaration.regionFor.feature(SimplejavaPackage.Literals.METHOD_CALL__METHOD_NAME).append[noSpace]
		classDeclaration.regionFor.feature(SimplejavaPackage.Literals.METHOD_CALL__METHOD_NAME).prepend[noSpace]
		classDeclaration.regionFor.keyword(")").append[noSpace]
		classDeclaration.regionFor.keyword(")").prepend[noSpace]
		classDeclaration.regionFor.keyword(";").prepend[noSpace]
		classDeclaration.regionFor.keyword(";").append[setNewLines(1,1,3)]
	}
	
	def dispatch void format(UnaryExpression classDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
	}
	//, , 
	def dispatch void format(ParanthesisOrBinaryExpression classDeclaration, extension IFormattableDocument document) {
		classDeclaration.source.format
		classDeclaration.argument.format
	}
	
	
}
