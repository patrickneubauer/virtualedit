/*
 * generated by Xtext 2.10.0
 */
grammar InternalSimplejava;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package at.ac.tuwien.big.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.ac.tuwien.big.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import at.ac.tuwien.big.services.SimplejavaGrammarAccess;

}
@parser::members {
	private SimplejavaGrammarAccess grammarAccess;

	public void setGrammarAccess(SimplejavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSimpleJava
entryRuleSimpleJava
:
{ before(grammarAccess.getSimpleJavaRule()); }
	 ruleSimpleJava
{ after(grammarAccess.getSimpleJavaRule()); } 
	 EOF 
;

// Rule SimpleJava
ruleSimpleJava 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleJavaAccess().getGroup()); }
		(rule__SimpleJava__Group__0)
		{ after(grammarAccess.getSimpleJavaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
		(rule__PackageDeclaration__Group__0)
		{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration
:
{ before(grammarAccess.getClassDeclarationRule()); }
	 ruleClassDeclaration
{ after(grammarAccess.getClassDeclarationRule()); } 
	 EOF 
;

// Rule ClassDeclaration
ruleClassDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getGroup()); }
		(rule__ClassDeclaration__Group__0)
		{ after(grammarAccess.getClassDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getAlternatives()); }
		(rule__Parameter__Alternatives)
		{ after(grammarAccess.getParameterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleParameter
entryRuleSimpleParameter
:
{ before(grammarAccess.getSimpleParameterRule()); }
	 ruleSimpleParameter
{ after(grammarAccess.getSimpleParameterRule()); } 
	 EOF 
;

// Rule SimpleParameter
ruleSimpleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleParameterAccess().getGroup()); }
		(rule__SimpleParameter__Group__0)
		{ after(grammarAccess.getSimpleParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodBlock
entryRuleMethodBlock
:
{ before(grammarAccess.getMethodBlockRule()); }
	 ruleMethodBlock
{ after(grammarAccess.getMethodBlockRule()); } 
	 EOF 
;

// Rule MethodBlock
ruleMethodBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodBlockAccess().getGroup()); }
		(rule__MethodBlock__Group__0)
		{ after(grammarAccess.getMethodBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleStatement
entryRuleSimpleStatement
:
{ before(grammarAccess.getSimpleStatementRule()); }
	 ruleSimpleStatement
{ after(grammarAccess.getSimpleStatementRule()); } 
	 EOF 
;

// Rule SimpleStatement
ruleSimpleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getAlternatives()); }
		(rule__SimpleStatement__Alternatives)
		{ after(grammarAccess.getSimpleStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleVariableDeclaration
entryRuleSimpleVariableDeclaration
:
{ before(grammarAccess.getSimpleVariableDeclarationRule()); }
	 ruleSimpleVariableDeclaration
{ after(grammarAccess.getSimpleVariableDeclarationRule()); } 
	 EOF 
;

// Rule SimpleVariableDeclaration
ruleSimpleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleVariableDeclarationAccess().getGroup()); }
		(rule__SimpleVariableDeclaration__Group__0)
		{ after(grammarAccess.getSimpleVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatement
entryRuleForStatement
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementAccess().getGroup()); }
		(rule__ForStatement__Group__0)
		{ after(grammarAccess.getForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForInStatement
entryRuleForInStatement
:
{ before(grammarAccess.getForInStatementRule()); }
	 ruleForInStatement
{ after(grammarAccess.getForInStatementRule()); } 
	 EOF 
;

// Rule ForInStatement
ruleForInStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForInStatementAccess().getGroup()); }
		(rule__ForInStatement__Group__0)
		{ after(grammarAccess.getForInStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
		(rule__WhileStatement__Group__0)
		{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
		(rule__ReturnStatement__Group__0)
		{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodCall
entryRuleMethodCall
:
{ before(grammarAccess.getMethodCallRule()); }
	 ruleMethodCall
{ after(grammarAccess.getMethodCallRule()); } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodCallAccess().getGroup()); }
		(rule__MethodCall__Group__0)
		{ after(grammarAccess.getMethodCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstructorCall
entryRuleConstructorCall
:
{ before(grammarAccess.getConstructorCallRule()); }
	 ruleConstructorCall
{ after(grammarAccess.getConstructorCallRule()); } 
	 EOF 
;

// Rule ConstructorCall
ruleConstructorCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstructorCallAccess().getGroup()); }
		(rule__ConstructorCall__Group__0)
		{ after(grammarAccess.getConstructorCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGenericExpression
entryRuleGenericExpression
:
{ before(grammarAccess.getGenericExpressionRule()); }
	 ruleGenericExpression
{ after(grammarAccess.getGenericExpressionRule()); } 
	 EOF 
;

// Rule GenericExpression
ruleGenericExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGenericExpressionAccess().getAlternatives()); }
		(rule__GenericExpression__Alternatives)
		{ after(grammarAccess.getGenericExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstantExpression
entryRuleConstantExpression
:
{ before(grammarAccess.getConstantExpressionRule()); }
	 ruleConstantExpression
{ after(grammarAccess.getConstantExpressionRule()); } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantExpressionAccess().getAlternatives()); }
		(rule__ConstantExpression__Alternatives)
		{ after(grammarAccess.getConstantExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullExpression
entryRuleNullExpression
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullExpressionAccess().getGroup()); }
		(rule__NullExpression__Group__0)
		{ after(grammarAccess.getNullExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerExpression
entryRuleIntegerExpression
:
{ before(grammarAccess.getIntegerExpressionRule()); }
	 ruleIntegerExpression
{ after(grammarAccess.getIntegerExpressionRule()); } 
	 EOF 
;

// Rule IntegerExpression
ruleIntegerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerExpressionAccess().getValueAssignment()); }
		(rule__IntegerExpression__ValueAssignment)
		{ after(grammarAccess.getIntegerExpressionAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getGroup()); }
		(rule__BooleanExpression__Group__0)
		{ after(grammarAccess.getBooleanExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
		(rule__StringExpression__ValueAssignment)
		{ after(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
		(rule__UnaryExpression__Group__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableExpression
entryRuleVariableExpression
:
{ before(grammarAccess.getVariableExpressionRule()); }
	 ruleVariableExpression
{ after(grammarAccess.getVariableExpressionRule()); } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableExpressionAccess().getVariableAssignment()); }
		(rule__VariableExpression__VariableAssignment)
		{ after(grammarAccess.getVariableExpressionAccess().getVariableAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParanthesisOrBinaryExpression
entryRuleParanthesisOrBinaryExpression
:
{ before(grammarAccess.getParanthesisOrBinaryExpressionRule()); }
	 ruleParanthesisOrBinaryExpression
{ after(grammarAccess.getParanthesisOrBinaryExpressionRule()); } 
	 EOF 
;

// Rule ParanthesisOrBinaryExpression
ruleParanthesisOrBinaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup()); }
		(rule__ParanthesisOrBinaryExpression__Group__0)
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
		(rule__QualifiedNameWithWildcard__Group__0)
		{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getSimpleParameterParserRuleCall_0()); }
		ruleSimpleParameter
		{ after(grammarAccess.getParameterAccess().getSimpleParameterParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getAttributeParserRuleCall_1()); }
		ruleAttribute
		{ after(grammarAccess.getParameterAccess().getAttributeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameAssignment_0()); }
		(rule__Type__TypeNameAssignment_0)
		{ after(grammarAccess.getTypeAccess().getTypeNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIsVoidAssignment_1()); }
		(rule__Type__IsVoidAssignment_1)
		{ after(grammarAccess.getTypeAccess().getIsVoidAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeRefAssignment_2()); }
		(rule__Type__TypeRefAssignment_2)
		{ after(grammarAccess.getTypeAccess().getTypeRefAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TypeNameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameIntKeyword_0_0_0()); }
		'int'
		{ after(grammarAccess.getTypeAccess().getTypeNameIntKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameDoubleKeyword_0_0_1()); }
		'double'
		{ after(grammarAccess.getTypeAccess().getTypeNameDoubleKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameStringKeyword_0_0_2()); }
		'String'
		{ after(grammarAccess.getTypeAccess().getTypeNameStringKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameBooleanKeyword_0_0_3()); }
		'boolean'
		{ after(grammarAccess.getTypeAccess().getTypeNameBooleanKeyword_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameObjectKeyword_0_0_4()); }
		'Object'
		{ after(grammarAccess.getTypeAccess().getTypeNameObjectKeyword_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameListKeyword_0_0_5()); }
		'List'
		{ after(grammarAccess.getTypeAccess().getTypeNameListKeyword_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameArrayListKeyword_0_0_6()); }
		'ArrayList'
		{ after(grammarAccess.getTypeAccess().getTypeNameArrayListKeyword_0_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameLoggerKeyword_0_0_7()); }
		'Logger'
		{ after(grammarAccess.getTypeAccess().getTypeNameLoggerKeyword_0_0_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getSimpleVariableDeclarationParserRuleCall_0()); }
		ruleSimpleVariableDeclaration
		{ after(grammarAccess.getSimpleStatementAccess().getSimpleVariableDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStatementAccess().getAssignmentParserRuleCall_1()); }
		ruleAssignment
		{ after(grammarAccess.getSimpleStatementAccess().getAssignmentParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getMethodBlockParserRuleCall_0()); }
		ruleMethodBlock
		{ after(grammarAccess.getStatementAccess().getMethodBlockParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_1()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_2()); }
		ruleAssignment
		{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); }
		ruleIfStatement
		{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); }
		ruleForStatement
		{ after(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForInStatementParserRuleCall_5()); }
		ruleForInStatement
		{ after(grammarAccess.getStatementAccess().getForInStatementParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_6()); }
		ruleWhileStatement
		{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_7()); }
		ruleReturnStatement
		{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_8()); }
		(rule__Statement__Group_8__0)
		{ after(grammarAccess.getStatementAccess().getGroup_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Alternatives_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getObjectAssignment_0_0_0_0()); }
		(rule__MethodCall__ObjectAssignment_0_0_0_0)
		{ after(grammarAccess.getMethodCallAccess().getObjectAssignment_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getThisObjectAssignment_0_0_0_1()); }
		(rule__MethodCall__ThisObjectAssignment_0_0_0_1)
		{ after(grammarAccess.getMethodCallAccess().getThisObjectAssignment_0_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodAssignment_0_1_0()); }
		(rule__MethodCall__MethodAssignment_0_1_0)
		{ after(grammarAccess.getMethodCallAccess().getMethodAssignment_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_1_1()); }
		(rule__MethodCall__MethodNameAssignment_0_1_1)
		{ after(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_1_2()); }
		(rule__MethodCall__MethodNameAssignment_0_1_2)
		{ after(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodNameAlternatives_0_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameEqualsKeyword_0_1_1_0_0()); }
		'equals'
		{ after(grammarAccess.getMethodCallAccess().getMethodNameEqualsKeyword_0_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameHashCodeKeyword_0_1_1_0_1()); }
		'hashCode'
		{ after(grammarAccess.getMethodCallAccess().getMethodNameHashCodeKeyword_0_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameAddKeyword_0_1_1_0_2()); }
		'add'
		{ after(grammarAccess.getMethodCallAccess().getMethodNameAddKeyword_0_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameRemoveKeyword_0_1_1_0_3()); }
		'remove'
		{ after(grammarAccess.getMethodCallAccess().getMethodNameRemoveKeyword_0_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameClearKeyword_0_1_1_0_4()); }
		'clear'
		{ after(grammarAccess.getMethodCallAccess().getMethodNameClearKeyword_0_1_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameLogpKeyword_0_1_1_0_5()); }
		'logp'
		{ after(grammarAccess.getMethodCallAccess().getMethodNameLogpKeyword_0_1_1_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGenericExpressionAccess().getVariableExpressionParserRuleCall_0()); }
		ruleVariableExpression
		{ after(grammarAccess.getGenericExpressionAccess().getVariableExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGenericExpressionAccess().getMethodCallParserRuleCall_1()); }
		ruleMethodCall
		{ after(grammarAccess.getGenericExpressionAccess().getMethodCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGenericExpressionAccess().getParanthesisOrBinaryExpressionParserRuleCall_2()); }
		ruleParanthesisOrBinaryExpression
		{ after(grammarAccess.getGenericExpressionAccess().getParanthesisOrBinaryExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getGenericExpressionAccess().getUnaryExpressionParserRuleCall_3()); }
		ruleUnaryExpression
		{ after(grammarAccess.getGenericExpressionAccess().getUnaryExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getGenericExpressionAccess().getConstantExpressionParserRuleCall_4()); }
		ruleConstantExpression
		{ after(grammarAccess.getGenericExpressionAccess().getConstantExpressionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getGenericExpressionAccess().getConstructorCallParserRuleCall_5()); }
		ruleConstructorCall
		{ after(grammarAccess.getGenericExpressionAccess().getConstructorCallParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantExpressionAccess().getIntegerExpressionParserRuleCall_0()); }
		ruleIntegerExpression
		{ after(grammarAccess.getConstantExpressionAccess().getIntegerExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantExpressionAccess().getStringExpressionParserRuleCall_1()); }
		ruleStringExpression
		{ after(grammarAccess.getConstantExpressionAccess().getStringExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
		ruleBooleanExpression
		{ after(grammarAccess.getConstantExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstantExpressionAccess().getNullExpressionParserRuleCall_3()); }
		ruleNullExpression
		{ after(grammarAccess.getConstantExpressionAccess().getNullExpressionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getValueAssignment_1_0()); }
		(rule__BooleanExpression__ValueAssignment_1_0)
		{ after(grammarAccess.getBooleanExpressionAccess().getValueAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getFalseKeyword_1_1()); }
		'false'
		{ after(grammarAccess.getBooleanExpressionAccess().getFalseKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__TypeAlternatives_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeVerticalLineVerticalLineKeyword_2_0_0_0()); }
		'||'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeVerticalLineVerticalLineKeyword_2_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAmpersandAmpersandKeyword_2_0_0_1()); }
		'&&'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAmpersandAmpersandKeyword_2_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAmpersandKeyword_2_0_0_2()); }
		'&'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAmpersandKeyword_2_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypePlusSignKeyword_2_0_0_3()); }
		'+'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypePlusSignKeyword_2_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeHyphenMinusKeyword_2_0_0_4()); }
		'-'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeHyphenMinusKeyword_2_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAsteriskKeyword_2_0_0_5()); }
		'*'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAsteriskKeyword_2_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeSolidusKeyword_2_0_0_6()); }
		'/'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeSolidusKeyword_2_0_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeEqualsSignEqualsSignKeyword_2_0_0_7()); }
		'=='
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeEqualsSignEqualsSignKeyword_2_0_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeExclamationMarkEqualsSignKeyword_2_0_0_8()); }
		'!='
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeExclamationMarkEqualsSignKeyword_2_0_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeLessThanSignKeyword_2_0_0_9()); }
		'<'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeLessThanSignKeyword_2_0_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeLessThanSignEqualsSignKeyword_2_0_0_10()); }
		'<='
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeLessThanSignEqualsSignKeyword_2_0_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeGreaterThanSignKeyword_2_0_0_11()); }
		'>'
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeGreaterThanSignKeyword_2_0_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeGreaterThanSignEqualsSignKeyword_2_0_0_12()); }
		'>='
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeGreaterThanSignEqualsSignKeyword_2_0_0_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleJava__Group__0__Impl
	rule__SimpleJava__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleJavaAccess().getPackageAssignment_0()); }
	(rule__SimpleJava__PackageAssignment_0)?
	{ after(grammarAccess.getSimpleJavaAccess().getPackageAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleJava__Group__1__Impl
	rule__SimpleJava__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleJavaAccess().getImportsAssignment_1()); }
	(rule__SimpleJava__ImportsAssignment_1)*
	{ after(grammarAccess.getSimpleJavaAccess().getImportsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleJava__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleJavaAccess().getClazzAssignment_2()); }
	(rule__SimpleJava__ClazzAssignment_2)
	{ after(grammarAccess.getSimpleJavaAccess().getClazzAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__1__Impl
	rule__PackageDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
	(rule__PackageDeclaration__NameAssignment_1)
	{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedAssignment_1()); }
	(rule__Import__ImportedAssignment_1)
	{ after(grammarAccess.getImportAccess().getImportedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getImportAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__0__Impl
	rule__ClassDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getPublicKeyword_0()); }
	'public'
	{ after(grammarAccess.getClassDeclarationAccess().getPublicKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__1__Impl
	rule__ClassDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getClassKeyword_1()); }
	'class'
	{ after(grammarAccess.getClassDeclarationAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__2__Impl
	rule__ClassDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getNameAssignment_2()); }
	(rule__ClassDeclaration__NameAssignment_2)
	{ after(grammarAccess.getClassDeclarationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__3__Impl
	rule__ClassDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__4__Impl
	rule__ClassDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getGroup_4()); }
	(rule__ClassDeclaration__Group_4__0)*
	{ after(grammarAccess.getClassDeclarationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__5__Impl
	rule__ClassDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getMethodAssignment_5()); }
	(rule__ClassDeclaration__MethodAssignment_5)*
	{ after(grammarAccess.getClassDeclarationAccess().getMethodAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclaration__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group_4__0__Impl
	rule__ClassDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getAttributeAssignment_4_0()); }
	(rule__ClassDeclaration__AttributeAssignment_4_0)
	{ after(grammarAccess.getClassDeclarationAccess().getAttributeAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDeclarationAccess().getSemicolonKeyword_4_1()); }
	';'
	{ after(grammarAccess.getClassDeclarationAccess().getSemicolonKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleParameter__Group__0__Impl
	rule__SimpleParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleParameterAccess().getTypeAssignment_0()); }
	(rule__SimpleParameter__TypeAssignment_0)
	{ after(grammarAccess.getSimpleParameterAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleParameterAccess().getNameAssignment_1()); }
	(rule__SimpleParameter__NameAssignment_1)
	{ after(grammarAccess.getSimpleParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
	(rule__Attribute__TypeAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
	(rule__Attribute__NameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getExpressionAssignment_3()); }
	(rule__Attribute__ExpressionAssignment_3)
	{ after(grammarAccess.getAttributeAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getPublicKeyword_0()); }
	'public'
	{ after(grammarAccess.getMethodAccess().getPublicKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getStaticAssignment_1()); }
	(rule__Method__StaticAssignment_1)?
	{ after(grammarAccess.getMethodAccess().getStaticAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getReturnTypeAssignment_2()); }
	(rule__Method__ReturnTypeAssignment_2)
	{ after(grammarAccess.getMethodAccess().getReturnTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_3()); }
	(rule__Method__NameAssignment_3)?
	{ after(grammarAccess.getMethodAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__4__Impl
	rule__Method__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__5__Impl
	rule__Method__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_5()); }
	(rule__Method__Group_5__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__6__Impl
	rule__Method__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getMethodAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getContentAssignment_7()); }
	(rule__Method__ContentAssignment_7)
	{ after(grammarAccess.getMethodAccess().getContentAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_5__0__Impl
	rule__Method__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParameterAssignment_5_0()); }
	(rule__Method__ParameterAssignment_5_0)
	{ after(grammarAccess.getMethodAccess().getParameterAssignment_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_5_1()); }
	(rule__Method__Group_5_1__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_5_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_5_1__0__Impl
	rule__Method__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCommaKeyword_5_1_0()); }
	','
	{ after(grammarAccess.getMethodAccess().getCommaKeyword_5_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParameterAssignment_5_1_1()); }
	(rule__Method__ParameterAssignment_5_1_1)
	{ after(grammarAccess.getMethodAccess().getParameterAssignment_5_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBlock__Group__0__Impl
	rule__MethodBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBlockAccess().getMethodBlockAction_0()); }
	()
	{ after(grammarAccess.getMethodBlockAccess().getMethodBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBlock__Group__1__Impl
	rule__MethodBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBlockAccess().getGeneratedAssignment_1()); }
	(rule__MethodBlock__GeneratedAssignment_1)?
	{ after(grammarAccess.getMethodBlockAccess().getGeneratedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBlockAccess().getGroup_2()); }
	(rule__MethodBlock__Group_2__0)
	{ after(grammarAccess.getMethodBlockAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodBlock__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBlock__Group_2__0__Impl
	rule__MethodBlock__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBlockAccess().getLeftCurlyBracketKeyword_2_0()); }
	'{'
	{ after(grammarAccess.getMethodBlockAccess().getLeftCurlyBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBlock__Group_2__1__Impl
	rule__MethodBlock__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBlockAccess().getStatementsAssignment_2_1()); }
	(rule__MethodBlock__StatementsAssignment_2_1)*
	{ after(grammarAccess.getMethodBlockAccess().getStatementsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBlock__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBlockAccess().getRightCurlyBracketKeyword_2_2()); }
	'}'
	{ after(grammarAccess.getMethodBlockAccess().getRightCurlyBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_8__0__Impl
	rule__Statement__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_8_0()); }
	ruleMethodCall
	{ after(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_8_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleVariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleVariableDeclaration__Group__0__Impl
	rule__SimpleVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleVariableDeclarationAccess().getVariableDeclarationAction_0()); }
	()
	{ after(grammarAccess.getSimpleVariableDeclarationAccess().getVariableDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleVariableDeclaration__Group__1__Impl
	rule__SimpleVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleVariableDeclarationAccess().getParameterAssignment_1()); }
	(rule__SimpleVariableDeclaration__ParameterAssignment_1)
	{ after(grammarAccess.getSimpleVariableDeclarationAccess().getParameterAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleVariableDeclaration__Group__2__Impl
	rule__SimpleVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getSimpleVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleVariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleVariableDeclarationAccess().getExpressionAssignment_3()); }
	(rule__SimpleVariableDeclaration__ExpressionAssignment_3)
	{ after(grammarAccess.getSimpleVariableDeclarationAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getParameterAssignment_0()); }
	(rule__VariableDeclaration__ParameterAssignment_0)
	{ after(grammarAccess.getVariableDeclarationAccess().getParameterAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_2()); }
	(rule__VariableDeclaration__ExpressionAssignment_2)
	{ after(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getParameterAssignment_0()); }
	(rule__Assignment__ParameterAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getParameterAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
	(rule__Assignment__ExpressionAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_1()); }
	(rule__IfStatement__ConditionAssignment_1)
	{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getThenAssignment_2()); }
	(rule__IfStatement__ThenAssignment_2)
	{ after(grammarAccess.getIfStatementAccess().getThenAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_3()); }
	(rule__IfStatement__Group_3__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_3__0__Impl
	rule__IfStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }
	'else'
	{ after(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseAssignment_3_1()); }
	(rule__IfStatement__ElseAssignment_3_1)
	{ after(grammarAccess.getIfStatementAccess().getElseAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForStatementAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getInitAssignment_2()); }
	(rule__ForStatement__InitAssignment_2)?
	{ after(grammarAccess.getForStatementAccess().getInitAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__4__Impl
	rule__ForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getConditionAssignment_4()); }
	(rule__ForStatement__ConditionAssignment_4)
	{ after(grammarAccess.getForStatementAccess().getConditionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__5__Impl
	rule__ForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__6__Impl
	rule__ForStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getContinuationAssignment_6()); }
	(rule__ForStatement__ContinuationAssignment_6)
	{ after(grammarAccess.getForStatementAccess().getContinuationAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__7__Impl
	rule__ForStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getBodyAssignment_8()); }
	(rule__ForStatement__BodyAssignment_8)
	{ after(grammarAccess.getForStatementAccess().getBodyAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForInStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForInStatement__Group__0__Impl
	rule__ForInStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForInStatementAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForInStatementAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForInStatement__Group__1__Impl
	rule__ForInStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForInStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForInStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForInStatement__Group__2__Impl
	rule__ForInStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForInStatementAccess().getSubparameterAssignment_2()); }
	(rule__ForInStatement__SubparameterAssignment_2)
	{ after(grammarAccess.getForInStatementAccess().getSubparameterAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForInStatement__Group__3__Impl
	rule__ForInStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForInStatementAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getForInStatementAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForInStatement__Group__4__Impl
	rule__ForInStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForInStatementAccess().getExpressionAssignment_4()); }
	(rule__ForInStatement__ExpressionAssignment_4)
	{ after(grammarAccess.getForInStatementAccess().getExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForInStatement__Group__5__Impl
	rule__ForInStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForInStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getForInStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForInStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForInStatementAccess().getBodyAssignment_6()); }
	(rule__ForInStatement__BodyAssignment_6)
	{ after(grammarAccess.getForInStatementAccess().getBodyAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getConditionAssignment_1()); }
	(rule__WhileStatement__ConditionAssignment_1)
	{ after(grammarAccess.getWhileStatementAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getBodyAssignment_2()); }
	(rule__WhileStatement__BodyAssignment_2)
	{ after(grammarAccess.getWhileStatementAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_1()); }
	(rule__ReturnStatement__ExpressionAssignment_1)
	{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__0__Impl
	rule__MethodCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getGroup_0()); }
	(rule__MethodCall__Group_0__0)
	{ after(grammarAccess.getMethodCallAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__1__Impl
	rule__MethodCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__2__Impl
	rule__MethodCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getGroup_2()); }
	(rule__MethodCall__Group_2__0)?
	{ after(grammarAccess.getMethodCallAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_0__0__Impl
	rule__MethodCall__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getGroup_0_0()); }
	(rule__MethodCall__Group_0_0__0)?
	{ after(grammarAccess.getMethodCallAccess().getGroup_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getAlternatives_0_1()); }
	(rule__MethodCall__Alternatives_0_1)
	{ after(grammarAccess.getMethodCallAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_0_0__0__Impl
	rule__MethodCall__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getAlternatives_0_0_0()); }
	(rule__MethodCall__Alternatives_0_0_0)
	{ after(grammarAccess.getMethodCallAccess().getAlternatives_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getFullStopKeyword_0_0_1()); }
	'.'
	{ after(grammarAccess.getMethodCallAccess().getFullStopKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_2__0__Impl
	rule__MethodCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getParameterAssignment_2_0()); }
	(rule__MethodCall__ParameterAssignment_2_0)
	{ after(grammarAccess.getMethodCallAccess().getParameterAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getGroup_2_1()); }
	(rule__MethodCall__Group_2_1__0)*
	{ after(grammarAccess.getMethodCallAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_2_1__0__Impl
	rule__MethodCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getMethodCallAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getParameterAssignment_2_1_1()); }
	(rule__MethodCall__ParameterAssignment_2_1_1)
	{ after(grammarAccess.getMethodCallAccess().getParameterAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group__0__Impl
	rule__ConstructorCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getNewKeyword_0()); }
	'new'
	{ after(grammarAccess.getConstructorCallAccess().getNewKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group__1__Impl
	rule__ConstructorCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getTypeAssignment_1()); }
	(rule__ConstructorCall__TypeAssignment_1)
	{ after(grammarAccess.getConstructorCallAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group__2__Impl
	rule__ConstructorCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getConstructorCallAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group__3__Impl
	rule__ConstructorCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getGroup_3()); }
	(rule__ConstructorCall__Group_3__0)?
	{ after(grammarAccess.getConstructorCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group_3__0__Impl
	rule__ConstructorCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getParameterAssignment_3_0()); }
	(rule__ConstructorCall__ParameterAssignment_3_0)
	{ after(grammarAccess.getConstructorCallAccess().getParameterAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getGroup_3_1()); }
	(rule__ConstructorCall__Group_3_1__0)*
	{ after(grammarAccess.getConstructorCallAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group_3_1__0__Impl
	rule__ConstructorCall__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getConstructorCallAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructorCall__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorCallAccess().getParameterAssignment_3_1_1()); }
	(rule__ConstructorCall__ParameterAssignment_3_1_1)
	{ after(grammarAccess.getConstructorCallAccess().getParameterAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NullExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullExpression__Group__0__Impl
	rule__NullExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0()); }
	()
	{ after(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NullExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullExpressionAccess().getNullKeyword_1()); }
	'null'
	{ after(grammarAccess.getNullExpressionAccess().getNullKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__0__Impl
	rule__BooleanExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0()); }
	()
	{ after(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives_1()); }
	(rule__BooleanExpression__Alternatives_1)
	{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getTypeAssignment_0()); }
	(rule__UnaryExpression__TypeAssignment_0)
	{ after(grammarAccess.getUnaryExpressionAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getSourceAssignment_1()); }
	(rule__UnaryExpression__SourceAssignment_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getSourceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesisOrBinaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParanthesisOrBinaryExpression__Group__0__Impl
	rule__ParanthesisOrBinaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParanthesisOrBinaryExpression__Group__1__Impl
	rule__ParanthesisOrBinaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getSourceAssignment_1()); }
	(rule__ParanthesisOrBinaryExpression__SourceAssignment_1)
	{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getSourceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParanthesisOrBinaryExpression__Group__2__Impl
	rule__ParanthesisOrBinaryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup_2()); }
	(rule__ParanthesisOrBinaryExpression__Group_2__0)?
	{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParanthesisOrBinaryExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesisOrBinaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParanthesisOrBinaryExpression__Group_2__0__Impl
	rule__ParanthesisOrBinaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAssignment_2_0()); }
	(rule__ParanthesisOrBinaryExpression__TypeAssignment_2_0)
	{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParanthesisOrBinaryExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getArgumentAssignment_2_1()); }
	(rule__ParanthesisOrBinaryExpression__ArgumentAssignment_2_1)
	{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getArgumentAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
	('.*')?
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleJava__PackageAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleJavaAccess().getPackagePackageDeclarationParserRuleCall_0_0()); }
		rulePackageDeclaration
		{ after(grammarAccess.getSimpleJavaAccess().getPackagePackageDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__ImportsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleJavaAccess().getImportsImportParserRuleCall_1_0()); }
		ruleImport
		{ after(grammarAccess.getSimpleJavaAccess().getImportsImportParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleJava__ClazzAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleJavaAccess().getClazzClassDeclarationParserRuleCall_2_0()); }
		ruleClassDeclaration
		{ after(grammarAccess.getSimpleJavaAccess().getClazzClassDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPackageDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedQualifiedNameWithWildcardParserRuleCall_1_0()); }
		ruleQualifiedNameWithWildcard
		{ after(grammarAccess.getImportAccess().getImportedQualifiedNameWithWildcardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getClassDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__AttributeAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getAttributeParameterParserRuleCall_4_0_0()); }
		ruleParameter
		{ after(grammarAccess.getClassDeclarationAccess().getAttributeParameterParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__MethodAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclarationAccess().getMethodMethodParserRuleCall_5_0()); }
		ruleMethod
		{ after(grammarAccess.getClassDeclarationAccess().getMethodMethodParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleParameter__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleParameterAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getSimpleParameterAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleParameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleParameterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSimpleParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getExpressionGenericExpressionParserRuleCall_3_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getAttributeAccess().getExpressionGenericExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TypeNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameAlternatives_0_0()); }
		(rule__Type__TypeNameAlternatives_0_0)
		{ after(grammarAccess.getTypeAccess().getTypeNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__IsVoidAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getIsVoidVoidKeyword_1_0()); }
		(
			{ before(grammarAccess.getTypeAccess().getIsVoidVoidKeyword_1_0()); }
			'void'
			{ after(grammarAccess.getTypeAccess().getIsVoidVoidKeyword_1_0()); }
		)
		{ after(grammarAccess.getTypeAccess().getIsVoidVoidKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TypeRefAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeRefClassDeclarationCrossReference_2_0()); }
		(
			{ before(grammarAccess.getTypeAccess().getTypeRefClassDeclarationQualifiedNameParserRuleCall_2_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getTypeAccess().getTypeRefClassDeclarationQualifiedNameParserRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getTypeAccess().getTypeRefClassDeclarationCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__StaticAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getStaticStaticKeyword_1_0()); }
		(
			{ before(grammarAccess.getMethodAccess().getStaticStaticKeyword_1_0()); }
			'static'
			{ after(grammarAccess.getMethodAccess().getStaticStaticKeyword_1_0()); }
		)
		{ after(grammarAccess.getMethodAccess().getStaticStaticKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ReturnTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getReturnTypeTypeParserRuleCall_2_0()); }
		ruleType
		{ after(grammarAccess.getMethodAccess().getReturnTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParameterAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParameterSimpleParameterParserRuleCall_5_0_0()); }
		ruleSimpleParameter
		{ after(grammarAccess.getMethodAccess().getParameterSimpleParameterParserRuleCall_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParameterAssignment_5_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParameterSimpleParameterParserRuleCall_5_1_1_0()); }
		ruleSimpleParameter
		{ after(grammarAccess.getMethodAccess().getParameterSimpleParameterParserRuleCall_5_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ContentAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getContentMethodBlockParserRuleCall_7_0()); }
		ruleMethodBlock
		{ after(grammarAccess.getMethodAccess().getContentMethodBlockParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__GeneratedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodBlockAccess().getGeneratedPointcutblockKeyword_1_0()); }
		(
			{ before(grammarAccess.getMethodBlockAccess().getGeneratedPointcutblockKeyword_1_0()); }
			'pointcutblock'
			{ after(grammarAccess.getMethodBlockAccess().getGeneratedPointcutblockKeyword_1_0()); }
		)
		{ after(grammarAccess.getMethodBlockAccess().getGeneratedPointcutblockKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBlock__StatementsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodBlockAccess().getStatementsStatementParserRuleCall_2_1_0()); }
		ruleStatement
		{ after(grammarAccess.getMethodBlockAccess().getStatementsStatementParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__ParameterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleVariableDeclarationAccess().getParameterSimpleParameterParserRuleCall_1_0()); }
		ruleSimpleParameter
		{ after(grammarAccess.getSimpleVariableDeclarationAccess().getParameterSimpleParameterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleVariableDeclaration__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleVariableDeclarationAccess().getExpressionGenericExpressionParserRuleCall_3_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getSimpleVariableDeclarationAccess().getExpressionGenericExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ParameterAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getParameterSimpleParameterParserRuleCall_0_0()); }
		ruleSimpleParameter
		{ after(grammarAccess.getVariableDeclarationAccess().getParameterSimpleParameterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getExpressionGenericExpressionParserRuleCall_2_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getVariableDeclarationAccess().getExpressionGenericExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ParameterAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getParameterParameterCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getParameterParameterQualifiedNameParserRuleCall_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getAssignmentAccess().getParameterParameterQualifiedNameParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getParameterParameterCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getExpressionGenericExpressionParserRuleCall_2_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getAssignmentAccess().getExpressionGenericExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getConditionParanthesisOrBinaryExpressionParserRuleCall_1_0()); }
		ruleParanthesisOrBinaryExpression
		{ after(grammarAccess.getIfStatementAccess().getConditionParanthesisOrBinaryExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ThenAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getThenMethodBlockParserRuleCall_2_0()); }
		ruleMethodBlock
		{ after(grammarAccess.getIfStatementAccess().getThenMethodBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseMethodBlockParserRuleCall_3_1_0()); }
		ruleMethodBlock
		{ after(grammarAccess.getIfStatementAccess().getElseMethodBlockParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__InitAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getInitSimpleStatementParserRuleCall_2_0()); }
		ruleSimpleStatement
		{ after(grammarAccess.getForStatementAccess().getInitSimpleStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__ConditionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getConditionGenericExpressionParserRuleCall_4_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getForStatementAccess().getConditionGenericExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__ContinuationAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getContinuationSimpleStatementParserRuleCall_6_0()); }
		ruleSimpleStatement
		{ after(grammarAccess.getForStatementAccess().getContinuationSimpleStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__BodyAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_8_0()); }
		ruleStatement
		{ after(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__SubparameterAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForInStatementAccess().getSubparameterSimpleParameterParserRuleCall_2_0()); }
		ruleSimpleParameter
		{ after(grammarAccess.getForInStatementAccess().getSubparameterSimpleParameterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__ExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForInStatementAccess().getExpressionGenericExpressionParserRuleCall_4_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getForInStatementAccess().getExpressionGenericExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForInStatement__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForInStatementAccess().getBodyStatementParserRuleCall_6_0()); }
		ruleStatement
		{ after(grammarAccess.getForInStatementAccess().getBodyStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getConditionParanthesisOrBinaryExpressionParserRuleCall_1_0()); }
		ruleParanthesisOrBinaryExpression
		{ after(grammarAccess.getWhileStatementAccess().getConditionParanthesisOrBinaryExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_2_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnStatementAccess().getExpressionGenericExpressionParserRuleCall_1_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getReturnStatementAccess().getExpressionGenericExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ObjectAssignment_0_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getObjectParameterCrossReference_0_0_0_0_0()); }
		(
			{ before(grammarAccess.getMethodCallAccess().getObjectParameterQualifiedNameParserRuleCall_0_0_0_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getMethodCallAccess().getObjectParameterQualifiedNameParserRuleCall_0_0_0_0_0_1()); }
		)
		{ after(grammarAccess.getMethodCallAccess().getObjectParameterCrossReference_0_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ThisObjectAssignment_0_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getThisObjectThisKeyword_0_0_0_1_0()); }
		(
			{ before(grammarAccess.getMethodCallAccess().getThisObjectThisKeyword_0_0_0_1_0()); }
			'this'
			{ after(grammarAccess.getMethodCallAccess().getThisObjectThisKeyword_0_0_0_1_0()); }
		)
		{ after(grammarAccess.getMethodCallAccess().getThisObjectThisKeyword_0_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodMethodCrossReference_0_1_0_0()); }
		(
			{ before(grammarAccess.getMethodCallAccess().getMethodMethodIDTerminalRuleCall_0_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMethodCallAccess().getMethodMethodIDTerminalRuleCall_0_1_0_0_1()); }
		)
		{ after(grammarAccess.getMethodCallAccess().getMethodMethodCrossReference_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodNameAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameAlternatives_0_1_1_0()); }
		(rule__MethodCall__MethodNameAlternatives_0_1_1_0)
		{ after(grammarAccess.getMethodCallAccess().getMethodNameAlternatives_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodNameAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodNameSystemOutPrintlnKeyword_0_1_2_0()); }
		(
			{ before(grammarAccess.getMethodCallAccess().getMethodNameSystemOutPrintlnKeyword_0_1_2_0()); }
			'System.out.println'
			{ after(grammarAccess.getMethodCallAccess().getMethodNameSystemOutPrintlnKeyword_0_1_2_0()); }
		)
		{ after(grammarAccess.getMethodCallAccess().getMethodNameSystemOutPrintlnKeyword_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ParameterAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getParameterGenericExpressionParserRuleCall_2_0_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getMethodCallAccess().getParameterGenericExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ParameterAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getParameterGenericExpressionParserRuleCall_2_1_1_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getMethodCallAccess().getParameterGenericExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorCallAccess().getTypeTypeParserRuleCall_1_0()); }
		ruleType
		{ after(grammarAccess.getConstructorCallAccess().getTypeTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__ParameterAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorCallAccess().getParameterConstantExpressionParserRuleCall_3_0_0()); }
		ruleConstantExpression
		{ after(grammarAccess.getConstructorCallAccess().getParameterConstantExpressionParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__ParameterAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorCallAccess().getParameterConstantExpressionParserRuleCall_3_1_1_0()); }
		ruleConstantExpression
		{ after(grammarAccess.getConstructorCallAccess().getParameterConstantExpressionParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerExpression__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ValueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getValueTrueKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getBooleanExpressionAccess().getValueTrueKeyword_1_0_0()); }
			'true'
			{ after(grammarAccess.getBooleanExpressionAccess().getValueTrueKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getBooleanExpressionAccess().getValueTrueKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getTypeExclamationMarkKeyword_0_0()); }
		(
			{ before(grammarAccess.getUnaryExpressionAccess().getTypeExclamationMarkKeyword_0_0()); }
			'!'
			{ after(grammarAccess.getUnaryExpressionAccess().getTypeExclamationMarkKeyword_0_0()); }
		)
		{ after(grammarAccess.getUnaryExpressionAccess().getTypeExclamationMarkKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__SourceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getSourceGenericExpressionParserRuleCall_1_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getSourceGenericExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableExpression__VariableAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableExpressionAccess().getVariableParameterCrossReference_0()); }
		(
			{ before(grammarAccess.getVariableExpressionAccess().getVariableParameterQualifiedNameParserRuleCall_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getVariableExpressionAccess().getVariableParameterQualifiedNameParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVariableExpressionAccess().getVariableParameterCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__SourceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getSourceGenericExpressionParserRuleCall_1_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getSourceGenericExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__TypeAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAlternatives_2_0_0()); }
		(rule__ParanthesisOrBinaryExpression__TypeAlternatives_2_0_0)
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAlternatives_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesisOrBinaryExpression__ArgumentAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParanthesisOrBinaryExpressionAccess().getArgumentGenericExpressionParserRuleCall_2_1_0()); }
		ruleGenericExpression
		{ after(grammarAccess.getParanthesisOrBinaryExpressionAccess().getArgumentGenericExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
