/**
 */
package simplejava.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import simplejava.util.SimplejavaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimplejavaItemProviderAdapterFactory extends SimplejavaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimplejavaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.SimpleJava} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleJavaItemProvider simpleJavaItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.SimpleJava}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleJavaAdapter() {
		if (simpleJavaItemProvider == null) {
			simpleJavaItemProvider = new SimpleJavaItemProvider(this);
		}

		return simpleJavaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Aspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AspectItemProvider aspectItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Aspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAspectAdapter() {
		if (aspectItemProvider == null) {
			aspectItemProvider = new AspectItemProvider(this);
		}

		return aspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.ForeignAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForeignAttributeItemProvider foreignAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.ForeignAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForeignAttributeAdapter() {
		if (foreignAttributeItemProvider == null) {
			foreignAttributeItemProvider = new ForeignAttributeItemProvider(this);
		}

		return foreignAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Pointcut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointcutItemProvider pointcutItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Pointcut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointcutAdapter() {
		if (pointcutItemProvider == null) {
			pointcutItemProvider = new PointcutItemProvider(this);
		}

		return pointcutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.PointcutCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointcutConditionItemProvider pointcutConditionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.PointcutCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointcutConditionAdapter() {
		if (pointcutConditionItemProvider == null) {
			pointcutConditionItemProvider = new PointcutConditionItemProvider(this);
		}

		return pointcutConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.UnaryPointcutCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryPointcutConditionItemProvider unaryPointcutConditionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.UnaryPointcutCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryPointcutConditionAdapter() {
		if (unaryPointcutConditionItemProvider == null) {
			unaryPointcutConditionItemProvider = new UnaryPointcutConditionItemProvider(this);
		}

		return unaryPointcutConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.BinaryPointcutCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryPointcutConditionItemProvider binaryPointcutConditionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.BinaryPointcutCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryPointcutConditionAdapter() {
		if (binaryPointcutConditionItemProvider == null) {
			binaryPointcutConditionItemProvider = new BinaryPointcutConditionItemProvider(this);
		}

		return binaryPointcutConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.SimplePointcutCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimplePointcutConditionItemProvider simplePointcutConditionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.SimplePointcutCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimplePointcutConditionAdapter() {
		if (simplePointcutConditionItemProvider == null) {
			simplePointcutConditionItemProvider = new SimplePointcutConditionItemProvider(this);
		}

		return simplePointcutConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.PointcutMethodFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointcutMethodFilterItemProvider pointcutMethodFilterItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.PointcutMethodFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointcutMethodFilterAdapter() {
		if (pointcutMethodFilterItemProvider == null) {
			pointcutMethodFilterItemProvider = new PointcutMethodFilterItemProvider(this);
		}

		return pointcutMethodFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.PointcutTypeFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointcutTypeFilterItemProvider pointcutTypeFilterItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.PointcutTypeFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointcutTypeFilterAdapter() {
		if (pointcutTypeFilterItemProvider == null) {
			pointcutTypeFilterItemProvider = new PointcutTypeFilterItemProvider(this);
		}

		return pointcutTypeFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Advice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdviceItemProvider adviceItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Advice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdviceAdapter() {
		if (adviceItemProvider == null) {
			adviceItemProvider = new AdviceItemProvider(this);
		}

		return adviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.PointcutRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointcutRefItemProvider pointcutRefItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.PointcutRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointcutRefAdapter() {
		if (pointcutRefItemProvider == null) {
			pointcutRefItemProvider = new PointcutRefItemProvider(this);
		}

		return pointcutRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.PackageDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageDeclarationItemProvider packageDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.PackageDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageDeclarationAdapter() {
		if (packageDeclarationItemProvider == null) {
			packageDeclarationItemProvider = new PackageDeclarationItemProvider(this);
		}

		return packageDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.ClassDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDeclarationItemProvider classDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.ClassDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDeclarationAdapter() {
		if (classDeclarationItemProvider == null) {
			classDeclarationItemProvider = new ClassDeclarationItemProvider(this);
		}

		return classDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Method} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodItemProvider methodItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Method}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodAdapter() {
		if (methodItemProvider == null) {
			methodItemProvider = new MethodItemProvider(this);
		}

		return methodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.MethodBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodBlockItemProvider methodBlockItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.MethodBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodBlockAdapter() {
		if (methodBlockItemProvider == null) {
			methodBlockItemProvider = new MethodBlockItemProvider(this);
		}

		return methodBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.SimpleStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleStatementItemProvider simpleStatementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.SimpleStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleStatementAdapter() {
		if (simpleStatementItemProvider == null) {
			simpleStatementItemProvider = new SimpleStatementItemProvider(this);
		}

		return simpleStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Statement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementItemProvider statementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Statement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.SimpleVariableDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleVariableDeclarationItemProvider simpleVariableDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.SimpleVariableDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleVariableDeclarationAdapter() {
		if (simpleVariableDeclarationItemProvider == null) {
			simpleVariableDeclarationItemProvider = new SimpleVariableDeclarationItemProvider(this);
		}

		return simpleVariableDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.VariableDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDeclarationItemProvider variableDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.VariableDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDeclarationAdapter() {
		if (variableDeclarationItemProvider == null) {
			variableDeclarationItemProvider = new VariableDeclarationItemProvider(this);
		}

		return variableDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.Assignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentItemProvider assignmentItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.Assignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.IfStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfStatementItemProvider ifStatementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.IfStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfStatementAdapter() {
		if (ifStatementItemProvider == null) {
			ifStatementItemProvider = new IfStatementItemProvider(this);
		}

		return ifStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.ForStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForStatementItemProvider forStatementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.ForStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForStatementAdapter() {
		if (forStatementItemProvider == null) {
			forStatementItemProvider = new ForStatementItemProvider(this);
		}

		return forStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.ForInStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForInStatementItemProvider forInStatementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.ForInStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForInStatementAdapter() {
		if (forInStatementItemProvider == null) {
			forInStatementItemProvider = new ForInStatementItemProvider(this);
		}

		return forInStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.WhileStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileStatementItemProvider whileStatementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.WhileStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileStatementAdapter() {
		if (whileStatementItemProvider == null) {
			whileStatementItemProvider = new WhileStatementItemProvider(this);
		}

		return whileStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.ReturnStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnStatementItemProvider returnStatementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.ReturnStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnStatementAdapter() {
		if (returnStatementItemProvider == null) {
			returnStatementItemProvider = new ReturnStatementItemProvider(this);
		}

		return returnStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.MethodCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodCallItemProvider methodCallItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.MethodCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodCallAdapter() {
		if (methodCallItemProvider == null) {
			methodCallItemProvider = new MethodCallItemProvider(this);
		}

		return methodCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.GenericExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericExpressionItemProvider genericExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.GenericExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericExpressionAdapter() {
		if (genericExpressionItemProvider == null) {
			genericExpressionItemProvider = new GenericExpressionItemProvider(this);
		}

		return genericExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.ConstantExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantExpressionItemProvider constantExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.ConstantExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantExpressionAdapter() {
		if (constantExpressionItemProvider == null) {
			constantExpressionItemProvider = new ConstantExpressionItemProvider(this);
		}

		return constantExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.NullExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullExpressionItemProvider nullExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.NullExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullExpressionAdapter() {
		if (nullExpressionItemProvider == null) {
			nullExpressionItemProvider = new NullExpressionItemProvider(this);
		}

		return nullExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.IntegerExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerExpressionItemProvider integerExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.IntegerExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerExpressionAdapter() {
		if (integerExpressionItemProvider == null) {
			integerExpressionItemProvider = new IntegerExpressionItemProvider(this);
		}

		return integerExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.BooleanExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanExpressionItemProvider booleanExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.BooleanExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanExpressionAdapter() {
		if (booleanExpressionItemProvider == null) {
			booleanExpressionItemProvider = new BooleanExpressionItemProvider(this);
		}

		return booleanExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.StringExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringExpressionItemProvider stringExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.StringExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringExpressionAdapter() {
		if (stringExpressionItemProvider == null) {
			stringExpressionItemProvider = new StringExpressionItemProvider(this);
		}

		return stringExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.UnaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryExpressionItemProvider unaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.UnaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryExpressionAdapter() {
		if (unaryExpressionItemProvider == null) {
			unaryExpressionItemProvider = new UnaryExpressionItemProvider(this);
		}

		return unaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.VariableExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableExpressionItemProvider variableExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.VariableExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableExpressionAdapter() {
		if (variableExpressionItemProvider == null) {
			variableExpressionItemProvider = new VariableExpressionItemProvider(this);
		}

		return variableExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.ParanthesisOrBinaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParanthesisOrBinaryExpressionItemProvider paranthesisOrBinaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.ParanthesisOrBinaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParanthesisOrBinaryExpressionAdapter() {
		if (paranthesisOrBinaryExpressionItemProvider == null) {
			paranthesisOrBinaryExpressionItemProvider = new ParanthesisOrBinaryExpressionItemProvider(this);
		}

		return paranthesisOrBinaryExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (simpleJavaItemProvider != null) simpleJavaItemProvider.dispose();
		if (aspectItemProvider != null) aspectItemProvider.dispose();
		if (foreignAttributeItemProvider != null) foreignAttributeItemProvider.dispose();
		if (pointcutItemProvider != null) pointcutItemProvider.dispose();
		if (pointcutConditionItemProvider != null) pointcutConditionItemProvider.dispose();
		if (unaryPointcutConditionItemProvider != null) unaryPointcutConditionItemProvider.dispose();
		if (binaryPointcutConditionItemProvider != null) binaryPointcutConditionItemProvider.dispose();
		if (simplePointcutConditionItemProvider != null) simplePointcutConditionItemProvider.dispose();
		if (pointcutMethodFilterItemProvider != null) pointcutMethodFilterItemProvider.dispose();
		if (pointcutTypeFilterItemProvider != null) pointcutTypeFilterItemProvider.dispose();
		if (adviceItemProvider != null) adviceItemProvider.dispose();
		if (pointcutRefItemProvider != null) pointcutRefItemProvider.dispose();
		if (packageDeclarationItemProvider != null) packageDeclarationItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (classDeclarationItemProvider != null) classDeclarationItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (methodItemProvider != null) methodItemProvider.dispose();
		if (methodBlockItemProvider != null) methodBlockItemProvider.dispose();
		if (simpleStatementItemProvider != null) simpleStatementItemProvider.dispose();
		if (statementItemProvider != null) statementItemProvider.dispose();
		if (simpleVariableDeclarationItemProvider != null) simpleVariableDeclarationItemProvider.dispose();
		if (variableDeclarationItemProvider != null) variableDeclarationItemProvider.dispose();
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (ifStatementItemProvider != null) ifStatementItemProvider.dispose();
		if (forStatementItemProvider != null) forStatementItemProvider.dispose();
		if (forInStatementItemProvider != null) forInStatementItemProvider.dispose();
		if (whileStatementItemProvider != null) whileStatementItemProvider.dispose();
		if (returnStatementItemProvider != null) returnStatementItemProvider.dispose();
		if (methodCallItemProvider != null) methodCallItemProvider.dispose();
		if (genericExpressionItemProvider != null) genericExpressionItemProvider.dispose();
		if (constantExpressionItemProvider != null) constantExpressionItemProvider.dispose();
		if (nullExpressionItemProvider != null) nullExpressionItemProvider.dispose();
		if (integerExpressionItemProvider != null) integerExpressionItemProvider.dispose();
		if (booleanExpressionItemProvider != null) booleanExpressionItemProvider.dispose();
		if (stringExpressionItemProvider != null) stringExpressionItemProvider.dispose();
		if (unaryExpressionItemProvider != null) unaryExpressionItemProvider.dispose();
		if (variableExpressionItemProvider != null) variableExpressionItemProvider.dispose();
		if (paranthesisOrBinaryExpressionItemProvider != null) paranthesisOrBinaryExpressionItemProvider.dispose();
	}

}
