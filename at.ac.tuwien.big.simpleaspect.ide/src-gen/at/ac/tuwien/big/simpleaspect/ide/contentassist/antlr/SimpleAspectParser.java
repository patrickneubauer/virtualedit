/*
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.simpleaspect.ide.contentassist.antlr;

import at.ac.tuwien.big.simpleaspect.ide.contentassist.antlr.internal.InternalSimpleAspectParser;
import at.ac.tuwien.big.simpleaspect.services.SimpleAspectGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SimpleAspectParser extends AbstractContentAssistParser {

	@Inject
	private SimpleAspectGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSimpleAspectParser createParser() {
		InternalSimpleAspectParser result = new InternalSimpleAspectParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAspectAccess().getAlternatives_3(), "rule__Aspect__Alternatives_3");
					put(grammarAccess.getPointcutConditionAccess().getAlternatives(), "rule__PointcutCondition__Alternatives");
					put(grammarAccess.getBinaryPointcutConditionAccess().getAlternatives_3(), "rule__BinaryPointcutCondition__Alternatives_3");
					put(grammarAccess.getSimplePointcutConditionAccess().getAlternatives(), "rule__SimplePointcutCondition__Alternatives");
					put(grammarAccess.getSimplePointcutConditionAccess().getAlternatives_0_0(), "rule__SimplePointcutCondition__Alternatives_0_0");
					put(grammarAccess.getSimplePointcutConditionAccess().getAlternatives_1_0(), "rule__SimplePointcutCondition__Alternatives_1_0");
					put(grammarAccess.getPointcutMethodFilterAccess().getAlternatives_3(), "rule__PointcutMethodFilter__Alternatives_3");
					put(grammarAccess.getPointcutMethodFilterAccess().getAlternatives_4(), "rule__PointcutMethodFilter__Alternatives_4");
					put(grammarAccess.getPointcutMethodFilterAccess().getAlternatives_5(), "rule__PointcutMethodFilter__Alternatives_5");
					put(grammarAccess.getPointcutMethodFilterAccess().getAlternatives_7(), "rule__PointcutMethodFilter__Alternatives_7");
					put(grammarAccess.getAdviceAccess().getAlternatives_1(), "rule__Advice__Alternatives_1");
					put(grammarAccess.getAdviceAccess().getAlternatives_5(), "rule__Advice__Alternatives_5");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTypeAccess().getTypeNameAlternatives_0_0(), "rule__Type__TypeNameAlternatives_0_0");
					put(grammarAccess.getMethodAccess().getAlternatives_2(), "rule__Method__Alternatives_2");
					put(grammarAccess.getSimpleStatementAccess().getAlternatives(), "rule__SimpleStatement__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getMethodCallAccess().getAlternatives_0(), "rule__MethodCall__Alternatives_0");
					put(grammarAccess.getMethodCallAccess().getAlternatives_0_0_0_0(), "rule__MethodCall__Alternatives_0_0_0_0");
					put(grammarAccess.getMethodCallAccess().getAlternatives_0_0_1(), "rule__MethodCall__Alternatives_0_0_1");
					put(grammarAccess.getMethodCallAccess().getMethodNameAlternatives_0_0_1_1_0(), "rule__MethodCall__MethodNameAlternatives_0_0_1_1_0");
					put(grammarAccess.getGenericExpressionAccess().getAlternatives(), "rule__GenericExpression__Alternatives");
					put(grammarAccess.getConstantExpressionAccess().getAlternatives(), "rule__ConstantExpression__Alternatives");
					put(grammarAccess.getBooleanExpressionAccess().getAlternatives_1(), "rule__BooleanExpression__Alternatives_1");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAlternatives_2_0_0(), "rule__ParanthesisOrBinaryExpression__TypeAlternatives_2_0_0");
					put(grammarAccess.getAspectAccess().getGroup(), "rule__Aspect__Group__0");
					put(grammarAccess.getForeignAttributeAccess().getGroup(), "rule__ForeignAttribute__Group__0");
					put(grammarAccess.getPointcutAccess().getGroup(), "rule__Pointcut__Group__0");
					put(grammarAccess.getPointcutAccess().getGroup_3(), "rule__Pointcut__Group_3__0");
					put(grammarAccess.getPointcutAccess().getGroup_3_1(), "rule__Pointcut__Group_3_1__0");
					put(grammarAccess.getUnaryPointcutConditionAccess().getGroup(), "rule__UnaryPointcutCondition__Group__0");
					put(grammarAccess.getBinaryPointcutConditionAccess().getGroup(), "rule__BinaryPointcutCondition__Group__0");
					put(grammarAccess.getSimplePointcutConditionAccess().getGroup_0(), "rule__SimplePointcutCondition__Group_0__0");
					put(grammarAccess.getSimplePointcutConditionAccess().getGroup_1(), "rule__SimplePointcutCondition__Group_1__0");
					put(grammarAccess.getPointcutMethodFilterAccess().getGroup(), "rule__PointcutMethodFilter__Group__0");
					put(grammarAccess.getPointcutMethodFilterAccess().getGroup_7_1(), "rule__PointcutMethodFilter__Group_7_1__0");
					put(grammarAccess.getPointcutMethodFilterAccess().getGroup_7_1_1(), "rule__PointcutMethodFilter__Group_7_1_1__0");
					put(grammarAccess.getPointcutTypeFilterAccess().getGroup(), "rule__PointcutTypeFilter__Group__0");
					put(grammarAccess.getAdviceAccess().getGroup(), "rule__Advice__Group__0");
					put(grammarAccess.getAdviceAccess().getGroup_3(), "rule__Advice__Group_3__0");
					put(grammarAccess.getAdviceAccess().getGroup_3_1(), "rule__Advice__Group_3_1__0");
					put(grammarAccess.getPointcutRefAccess().getGroup(), "rule__PointcutRef__Group__0");
					put(grammarAccess.getPointcutRefAccess().getGroup_2(), "rule__PointcutRef__Group_2__0");
					put(grammarAccess.getPointcutRefAccess().getGroup_2_1(), "rule__PointcutRef__Group_2_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
					put(grammarAccess.getMethodAccess().getGroup_5_1(), "rule__Method__Group_5_1__0");
					put(grammarAccess.getMethodBlockAccess().getGroup(), "rule__MethodBlock__Group__0");
					put(grammarAccess.getMethodBlockAccess().getGroup_2(), "rule__MethodBlock__Group_2__0");
					put(grammarAccess.getSimpleVariableDeclarationAccess().getGroup(), "rule__SimpleVariableDeclaration__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_3(), "rule__IfStatement__Group_3__0");
					put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
					put(grammarAccess.getForInStatementAccess().getGroup(), "rule__ForInStatement__Group__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup_0_0(), "rule__MethodCall__Group_0_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_0_0_0(), "rule__MethodCall__Group_0_0_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2(), "rule__MethodCall__Group_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2_1(), "rule__MethodCall__Group_2_1__0");
					put(grammarAccess.getNullExpressionAccess().getGroup(), "rule__NullExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup(), "rule__ParanthesisOrBinaryExpression__Group__0");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup_2(), "rule__ParanthesisOrBinaryExpression__Group_2__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getAspectAccess().getNameAssignment_1(), "rule__Aspect__NameAssignment_1");
					put(grammarAccess.getAspectAccess().getAttributesAssignment_3_0(), "rule__Aspect__AttributesAssignment_3_0");
					put(grammarAccess.getAspectAccess().getMethodsAssignment_3_1(), "rule__Aspect__MethodsAssignment_3_1");
					put(grammarAccess.getAspectAccess().getPointcutsAssignment_3_2(), "rule__Aspect__PointcutsAssignment_3_2");
					put(grammarAccess.getAspectAccess().getAdvicesAssignment_3_3(), "rule__Aspect__AdvicesAssignment_3_3");
					put(grammarAccess.getForeignAttributeAccess().getTypeAssignment_1(), "rule__ForeignAttribute__TypeAssignment_1");
					put(grammarAccess.getForeignAttributeAccess().getInTypeAssignment_2(), "rule__ForeignAttribute__InTypeAssignment_2");
					put(grammarAccess.getForeignAttributeAccess().getNameAssignment_4(), "rule__ForeignAttribute__NameAssignment_4");
					put(grammarAccess.getPointcutAccess().getNameAssignment_1(), "rule__Pointcut__NameAssignment_1");
					put(grammarAccess.getPointcutAccess().getParameterAssignment_3_0(), "rule__Pointcut__ParameterAssignment_3_0");
					put(grammarAccess.getPointcutAccess().getParameterAssignment_3_1_1(), "rule__Pointcut__ParameterAssignment_3_1_1");
					put(grammarAccess.getPointcutAccess().getConditionAssignment_6(), "rule__Pointcut__ConditionAssignment_6");
					put(grammarAccess.getUnaryPointcutConditionAccess().getConditionAssignment_1(), "rule__UnaryPointcutCondition__ConditionAssignment_1");
					put(grammarAccess.getBinaryPointcutConditionAccess().getFirstAssignment_1(), "rule__BinaryPointcutCondition__FirstAssignment_1");
					put(grammarAccess.getBinaryPointcutConditionAccess().getTypeAssignment_3_0(), "rule__BinaryPointcutCondition__TypeAssignment_3_0");
					put(grammarAccess.getBinaryPointcutConditionAccess().getTypeAssignment_3_1(), "rule__BinaryPointcutCondition__TypeAssignment_3_1");
					put(grammarAccess.getBinaryPointcutConditionAccess().getSecondAssignment_5(), "rule__BinaryPointcutCondition__SecondAssignment_5");
					put(grammarAccess.getSimplePointcutConditionAccess().getTypeAssignment_0_0_0(), "rule__SimplePointcutCondition__TypeAssignment_0_0_0");
					put(grammarAccess.getSimplePointcutConditionAccess().getTypeAssignment_0_0_1(), "rule__SimplePointcutCondition__TypeAssignment_0_0_1");
					put(grammarAccess.getSimplePointcutConditionAccess().getConditionAssignment_0_2(), "rule__SimplePointcutCondition__ConditionAssignment_0_2");
					put(grammarAccess.getSimplePointcutConditionAccess().getTypeAssignment_1_0_0(), "rule__SimplePointcutCondition__TypeAssignment_1_0_0");
					put(grammarAccess.getSimplePointcutConditionAccess().getTypeAssignment_1_0_1(), "rule__SimplePointcutCondition__TypeAssignment_1_0_1");
					put(grammarAccess.getSimplePointcutConditionAccess().getConditionAssignment_1_2(), "rule__SimplePointcutCondition__ConditionAssignment_1_2");
					put(grammarAccess.getPointcutMethodFilterAccess().getIsPublicAssignment_0(), "rule__PointcutMethodFilter__IsPublicAssignment_0");
					put(grammarAccess.getPointcutMethodFilterAccess().getIsPrivateAssignment_1(), "rule__PointcutMethodFilter__IsPrivateAssignment_1");
					put(grammarAccess.getPointcutMethodFilterAccess().getIsStaticAssignment_2(), "rule__PointcutMethodFilter__IsStaticAssignment_2");
					put(grammarAccess.getPointcutMethodFilterAccess().getAnyReturnAssignment_3_0(), "rule__PointcutMethodFilter__AnyReturnAssignment_3_0");
					put(grammarAccess.getPointcutMethodFilterAccess().getReturnTypeAssignment_3_1(), "rule__PointcutMethodFilter__ReturnTypeAssignment_3_1");
					put(grammarAccess.getPointcutMethodFilterAccess().getAnyClassAssignment_4_0(), "rule__PointcutMethodFilter__AnyClassAssignment_4_0");
					put(grammarAccess.getPointcutMethodFilterAccess().getClassTypeAssignment_4_1(), "rule__PointcutMethodFilter__ClassTypeAssignment_4_1");
					put(grammarAccess.getPointcutMethodFilterAccess().getAnyMethodAssignment_5_0(), "rule__PointcutMethodFilter__AnyMethodAssignment_5_0");
					put(grammarAccess.getPointcutMethodFilterAccess().getMethodNameAssignment_5_1(), "rule__PointcutMethodFilter__MethodNameAssignment_5_1");
					put(grammarAccess.getPointcutMethodFilterAccess().getAnyParameterAssignment_7_0(), "rule__PointcutMethodFilter__AnyParameterAssignment_7_0");
					put(grammarAccess.getPointcutMethodFilterAccess().getParameterAssignment_7_1_0(), "rule__PointcutMethodFilter__ParameterAssignment_7_1_0");
					put(grammarAccess.getPointcutMethodFilterAccess().getParameterAssignment_7_1_1_1(), "rule__PointcutMethodFilter__ParameterAssignment_7_1_1_1");
					put(grammarAccess.getPointcutTypeFilterAccess().getClassTypeAssignment_1(), "rule__PointcutTypeFilter__ClassTypeAssignment_1");
					put(grammarAccess.getAdviceAccess().getTypeAssignment_1_0(), "rule__Advice__TypeAssignment_1_0");
					put(grammarAccess.getAdviceAccess().getTypeAssignment_1_1(), "rule__Advice__TypeAssignment_1_1");
					put(grammarAccess.getAdviceAccess().getTypeAssignment_1_2(), "rule__Advice__TypeAssignment_1_2");
					put(grammarAccess.getAdviceAccess().getParameterAssignment_3_0(), "rule__Advice__ParameterAssignment_3_0");
					put(grammarAccess.getAdviceAccess().getParameterAssignment_3_1_1(), "rule__Advice__ParameterAssignment_3_1_1");
					put(grammarAccess.getAdviceAccess().getPointcutAssignment_5_0(), "rule__Advice__PointcutAssignment_5_0");
					put(grammarAccess.getAdviceAccess().getPointcutAssignment_5_1(), "rule__Advice__PointcutAssignment_5_1");
					put(grammarAccess.getAdviceAccess().getCodeAssignment_6(), "rule__Advice__CodeAssignment_6");
					put(grammarAccess.getPointcutRefAccess().getPointcutAssignment_0(), "rule__PointcutRef__PointcutAssignment_0");
					put(grammarAccess.getPointcutRefAccess().getParameterValueAssignment_2_0(), "rule__PointcutRef__ParameterValueAssignment_2_0");
					put(grammarAccess.getPointcutRefAccess().getParameterValueAssignment_2_1_1(), "rule__PointcutRef__ParameterValueAssignment_2_1_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getTypeNameAssignment_0(), "rule__Type__TypeNameAssignment_0");
					put(grammarAccess.getTypeAccess().getTypeRefAssignment_1(), "rule__Type__TypeRefAssignment_1");
					put(grammarAccess.getMethodAccess().getStaticAssignment_1(), "rule__Method__StaticAssignment_1");
					put(grammarAccess.getMethodAccess().getReturnTypeAssignment_2_1(), "rule__Method__ReturnTypeAssignment_2_1");
					put(grammarAccess.getMethodAccess().getNameAssignment_3(), "rule__Method__NameAssignment_3");
					put(grammarAccess.getMethodAccess().getParameterAssignment_5_0(), "rule__Method__ParameterAssignment_5_0");
					put(grammarAccess.getMethodAccess().getParameterAssignment_5_1_1(), "rule__Method__ParameterAssignment_5_1_1");
					put(grammarAccess.getMethodAccess().getContentAssignment_7(), "rule__Method__ContentAssignment_7");
					put(grammarAccess.getMethodBlockAccess().getGeneratedAssignment_1(), "rule__MethodBlock__GeneratedAssignment_1");
					put(grammarAccess.getMethodBlockAccess().getStatementsAssignment_2_1(), "rule__MethodBlock__StatementsAssignment_2_1");
					put(grammarAccess.getSimpleVariableDeclarationAccess().getParameterAssignment_1(), "rule__SimpleVariableDeclaration__ParameterAssignment_1");
					put(grammarAccess.getSimpleVariableDeclarationAccess().getExpressionAssignment_3(), "rule__SimpleVariableDeclaration__ExpressionAssignment_3");
					put(grammarAccess.getVariableDeclarationAccess().getParameterAssignment_0(), "rule__VariableDeclaration__ParameterAssignment_0");
					put(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_2(), "rule__VariableDeclaration__ExpressionAssignment_2");
					put(grammarAccess.getAssignmentAccess().getParameterAssignment_0(), "rule__Assignment__ParameterAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_1(), "rule__IfStatement__ConditionAssignment_1");
					put(grammarAccess.getIfStatementAccess().getThenAssignment_2(), "rule__IfStatement__ThenAssignment_2");
					put(grammarAccess.getIfStatementAccess().getElseAssignment_3_1(), "rule__IfStatement__ElseAssignment_3_1");
					put(grammarAccess.getForStatementAccess().getInitAssignment_2(), "rule__ForStatement__InitAssignment_2");
					put(grammarAccess.getForStatementAccess().getConditionAssignment_4(), "rule__ForStatement__ConditionAssignment_4");
					put(grammarAccess.getForStatementAccess().getContinuationAssignment_6(), "rule__ForStatement__ContinuationAssignment_6");
					put(grammarAccess.getForStatementAccess().getBodyAssignment_8(), "rule__ForStatement__BodyAssignment_8");
					put(grammarAccess.getForInStatementAccess().getSubparameterAssignment_2(), "rule__ForInStatement__SubparameterAssignment_2");
					put(grammarAccess.getForInStatementAccess().getExpressionAssignment_4(), "rule__ForInStatement__ExpressionAssignment_4");
					put(grammarAccess.getForInStatementAccess().getBodyAssignment_6(), "rule__ForInStatement__BodyAssignment_6");
					put(grammarAccess.getWhileStatementAccess().getConditionAssignment_1(), "rule__WhileStatement__ConditionAssignment_1");
					put(grammarAccess.getWhileStatementAccess().getBodyAssignment_2(), "rule__WhileStatement__BodyAssignment_2");
					put(grammarAccess.getReturnStatementAccess().getExpressionAssignment_1(), "rule__ReturnStatement__ExpressionAssignment_1");
					put(grammarAccess.getMethodCallAccess().getObjectAssignment_0_0_0_0_0(), "rule__MethodCall__ObjectAssignment_0_0_0_0_0");
					put(grammarAccess.getMethodCallAccess().getThisObjectAssignment_0_0_0_0_1(), "rule__MethodCall__ThisObjectAssignment_0_0_0_0_1");
					put(grammarAccess.getMethodCallAccess().getMethodAssignment_0_0_1_0(), "rule__MethodCall__MethodAssignment_0_0_1_0");
					put(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_0_1_1(), "rule__MethodCall__MethodNameAssignment_0_0_1_1");
					put(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_1(), "rule__MethodCall__MethodNameAssignment_0_1");
					put(grammarAccess.getMethodCallAccess().getParameterAssignment_2_0(), "rule__MethodCall__ParameterAssignment_2_0");
					put(grammarAccess.getMethodCallAccess().getParameterAssignment_2_1_1(), "rule__MethodCall__ParameterAssignment_2_1_1");
					put(grammarAccess.getIntegerExpressionAccess().getValueAssignment(), "rule__IntegerExpression__ValueAssignment");
					put(grammarAccess.getBooleanExpressionAccess().getValueAssignment_1_0(), "rule__BooleanExpression__ValueAssignment_1_0");
					put(grammarAccess.getStringExpressionAccess().getValueAssignment(), "rule__StringExpression__ValueAssignment");
					put(grammarAccess.getUnaryExpressionAccess().getTypeAssignment_0(), "rule__UnaryExpression__TypeAssignment_0");
					put(grammarAccess.getUnaryExpressionAccess().getSourceAssignment_1(), "rule__UnaryExpression__SourceAssignment_1");
					put(grammarAccess.getVariableExpressionAccess().getVariableAssignment(), "rule__VariableExpression__VariableAssignment");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getSourceAssignment_1(), "rule__ParanthesisOrBinaryExpression__SourceAssignment_1");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAssignment_2_0(), "rule__ParanthesisOrBinaryExpression__TypeAssignment_2_0");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getArgumentAssignment_2_1(), "rule__ParanthesisOrBinaryExpression__ArgumentAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSimpleAspectParser typedParser = (InternalSimpleAspectParser) parser;
			typedParser.entryRuleAspect();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimpleAspectGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimpleAspectGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
