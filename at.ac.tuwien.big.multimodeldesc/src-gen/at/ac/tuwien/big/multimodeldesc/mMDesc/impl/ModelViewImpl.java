/**
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.multimodeldesc.mMDesc.impl;

import at.ac.tuwien.big.multimodeldesc.mMDesc.MMDescPackage;
import at.ac.tuwien.big.multimodeldesc.mMDesc.ModelRef;
import at.ac.tuwien.big.multimodeldesc.mMDesc.ModelView;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model View</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link at.ac.tuwien.big.multimodeldesc.mMDesc.impl.ModelViewImpl#getViewed <em>Viewed</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelViewImpl extends MinimalEObjectImpl.Container implements ModelView
{
  /**
   * The cached value of the '{@link #getViewed() <em>Viewed</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewed()
   * @generated
   * @ordered
   */
  protected EList<ModelRef> viewed;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelViewImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MMDescPackage.Literals.MODEL_VIEW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ModelRef> getViewed()
  {
    if (viewed == null)
    {
      viewed = new EObjectResolvingEList<ModelRef>(ModelRef.class, this, MMDescPackage.MODEL_VIEW__VIEWED);
    }
    return viewed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MMDescPackage.MODEL_VIEW__VIEWED:
        return getViewed();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MMDescPackage.MODEL_VIEW__VIEWED:
        getViewed().clear();
        getViewed().addAll((Collection<? extends ModelRef>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MMDescPackage.MODEL_VIEW__VIEWED:
        getViewed().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MMDescPackage.MODEL_VIEW__VIEWED:
        return viewed != null && !viewed.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelViewImpl
