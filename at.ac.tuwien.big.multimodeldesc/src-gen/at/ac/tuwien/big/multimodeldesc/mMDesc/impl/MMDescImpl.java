/**
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.multimodeldesc.mMDesc.impl;

import at.ac.tuwien.big.multimodeldesc.mMDesc.MMDesc;
import at.ac.tuwien.big.multimodeldesc.mMDesc.MMDescPackage;
import at.ac.tuwien.big.multimodeldesc.mMDesc.ModelRef;
import at.ac.tuwien.big.multimodeldesc.mMDesc.ModelView;
import at.ac.tuwien.big.multimodeldesc.mMDesc.PointDesc;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>MM Desc</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link at.ac.tuwien.big.multimodeldesc.mMDesc.impl.MMDescImpl#getPointDesc <em>Point Desc</em>}</li>
 *   <li>{@link at.ac.tuwien.big.multimodeldesc.mMDesc.impl.MMDescImpl#getModels <em>Models</em>}</li>
 *   <li>{@link at.ac.tuwien.big.multimodeldesc.mMDesc.impl.MMDescImpl#getView <em>View</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MMDescImpl extends MinimalEObjectImpl.Container implements MMDesc
{
  /**
   * The cached value of the '{@link #getPointDesc() <em>Point Desc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPointDesc()
   * @generated
   * @ordered
   */
  protected PointDesc pointDesc;

  /**
   * The cached value of the '{@link #getModels() <em>Models</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModels()
   * @generated
   * @ordered
   */
  protected EList<ModelRef> models;

  /**
   * The cached value of the '{@link #getView() <em>View</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getView()
   * @generated
   * @ordered
   */
  protected ModelView view;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MMDescImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MMDescPackage.Literals.MM_DESC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointDesc getPointDesc()
  {
    return pointDesc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPointDesc(PointDesc newPointDesc, NotificationChain msgs)
  {
    PointDesc oldPointDesc = pointDesc;
    pointDesc = newPointDesc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MMDescPackage.MM_DESC__POINT_DESC, oldPointDesc, newPointDesc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPointDesc(PointDesc newPointDesc)
  {
    if (newPointDesc != pointDesc)
    {
      NotificationChain msgs = null;
      if (pointDesc != null)
        msgs = ((InternalEObject)pointDesc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MMDescPackage.MM_DESC__POINT_DESC, null, msgs);
      if (newPointDesc != null)
        msgs = ((InternalEObject)newPointDesc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MMDescPackage.MM_DESC__POINT_DESC, null, msgs);
      msgs = basicSetPointDesc(newPointDesc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MMDescPackage.MM_DESC__POINT_DESC, newPointDesc, newPointDesc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ModelRef> getModels()
  {
    if (models == null)
    {
      models = new EObjectContainmentEList<ModelRef>(ModelRef.class, this, MMDescPackage.MM_DESC__MODELS);
    }
    return models;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelView getView()
  {
    return view;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetView(ModelView newView, NotificationChain msgs)
  {
    ModelView oldView = view;
    view = newView;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MMDescPackage.MM_DESC__VIEW, oldView, newView);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setView(ModelView newView)
  {
    if (newView != view)
    {
      NotificationChain msgs = null;
      if (view != null)
        msgs = ((InternalEObject)view).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MMDescPackage.MM_DESC__VIEW, null, msgs);
      if (newView != null)
        msgs = ((InternalEObject)newView).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MMDescPackage.MM_DESC__VIEW, null, msgs);
      msgs = basicSetView(newView, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MMDescPackage.MM_DESC__VIEW, newView, newView));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MMDescPackage.MM_DESC__POINT_DESC:
        return basicSetPointDesc(null, msgs);
      case MMDescPackage.MM_DESC__MODELS:
        return ((InternalEList<?>)getModels()).basicRemove(otherEnd, msgs);
      case MMDescPackage.MM_DESC__VIEW:
        return basicSetView(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MMDescPackage.MM_DESC__POINT_DESC:
        return getPointDesc();
      case MMDescPackage.MM_DESC__MODELS:
        return getModels();
      case MMDescPackage.MM_DESC__VIEW:
        return getView();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MMDescPackage.MM_DESC__POINT_DESC:
        setPointDesc((PointDesc)newValue);
        return;
      case MMDescPackage.MM_DESC__MODELS:
        getModels().clear();
        getModels().addAll((Collection<? extends ModelRef>)newValue);
        return;
      case MMDescPackage.MM_DESC__VIEW:
        setView((ModelView)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MMDescPackage.MM_DESC__POINT_DESC:
        setPointDesc((PointDesc)null);
        return;
      case MMDescPackage.MM_DESC__MODELS:
        getModels().clear();
        return;
      case MMDescPackage.MM_DESC__VIEW:
        setView((ModelView)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MMDescPackage.MM_DESC__POINT_DESC:
        return pointDesc != null;
      case MMDescPackage.MM_DESC__MODELS:
        return models != null && !models.isEmpty();
      case MMDescPackage.MM_DESC__VIEW:
        return view != null;
    }
    return super.eIsSet(featureID);
  }

} //MMDescImpl
