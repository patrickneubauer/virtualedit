/*
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.multimodeldesc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MMDescGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MMDescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.multimodeldesc.MMDesc.MMDesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPointDescAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPointDescPointDescParserRuleCall_0_0 = (RuleCall)cPointDescAssignment_0.eContents().get(0);
		private final Assignment cModelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelsModelRefParserRuleCall_1_0 = (RuleCall)cModelsAssignment_1.eContents().get(0);
		private final Assignment cViewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewModelViewParserRuleCall_2_0 = (RuleCall)cViewAssignment_2.eContents().get(0);
		
		//MMDesc:
		//	pointDesc=PointDesc
		//	models+=ModelRef*
		//	view=ModelView?;
		@Override public ParserRule getRule() { return rule; }
		
		//pointDesc=PointDesc models+=ModelRef* view=ModelView?
		public Group getGroup() { return cGroup; }
		
		//pointDesc=PointDesc
		public Assignment getPointDescAssignment_0() { return cPointDescAssignment_0; }
		
		//PointDesc
		public RuleCall getPointDescPointDescParserRuleCall_0_0() { return cPointDescPointDescParserRuleCall_0_0; }
		
		//models+=ModelRef*
		public Assignment getModelsAssignment_1() { return cModelsAssignment_1; }
		
		//ModelRef
		public RuleCall getModelsModelRefParserRuleCall_1_0() { return cModelsModelRefParserRuleCall_1_0; }
		
		//view=ModelView?
		public Assignment getViewAssignment_2() { return cViewAssignment_2; }
		
		//ModelView
		public RuleCall getViewModelViewParserRuleCall_2_0() { return cViewModelViewParserRuleCall_2_0; }
	}
	public class PointDescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.multimodeldesc.MMDesc.PointDesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointDescAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPointDescKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cTypeIntegerKeyword_3_0_0 = (Keyword)cTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cTypeAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Keyword cTypeStringKeyword_3_1_0_0 = (Keyword)cTypeAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1_1 = (Alternatives)cGroup_3_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_3_1_1_1_0 = (Assignment)cAlternatives_3_1_1_1.eContents().get(0);
		private final Keyword cTypeIntegerKeyword_3_1_1_1_0_0 = (Keyword)cTypeAssignment_3_1_1_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_1_1_1_1 = (Assignment)cAlternatives_3_1_1_1.eContents().get(1);
		private final Keyword cTypeStringKeyword_3_1_1_1_1_0 = (Keyword)cTypeAssignment_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PointDesc:
		//	{PointDesc}
		//	'PointDesc' '[' (type+='Integer' | type+='String' (',' (type+='Integer' | type+='String'))*)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//{PointDesc} 'PointDesc' '[' (type+='Integer' | type+='String' (',' (type+='Integer' | type+='String'))*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{PointDesc}
		public Action getPointDescAction_0() { return cPointDescAction_0; }
		
		//'PointDesc'
		public Keyword getPointDescKeyword_1() { return cPointDescKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(type+='Integer' | type+='String' (',' (type+='Integer' | type+='String'))*)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//type+='Integer'
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }
		
		//'Integer'
		public Keyword getTypeIntegerKeyword_3_0_0() { return cTypeIntegerKeyword_3_0_0; }
		
		//type+='String' (',' (type+='Integer' | type+='String'))*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//type+='String'
		public Assignment getTypeAssignment_3_1_0() { return cTypeAssignment_3_1_0; }
		
		//'String'
		public Keyword getTypeStringKeyword_3_1_0_0() { return cTypeStringKeyword_3_1_0_0; }
		
		//(',' (type+='Integer' | type+='String'))*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//type+='Integer' | type+='String'
		public Alternatives getAlternatives_3_1_1_1() { return cAlternatives_3_1_1_1; }
		
		//type+='Integer'
		public Assignment getTypeAssignment_3_1_1_1_0() { return cTypeAssignment_3_1_1_1_0; }
		
		//'Integer'
		public Keyword getTypeIntegerKeyword_3_1_1_1_0_0() { return cTypeIntegerKeyword_3_1_1_1_0_0; }
		
		//type+='String'
		public Assignment getTypeAssignment_3_1_1_1_1() { return cTypeAssignment_3_1_1_1_1; }
		
		//'String'
		public Keyword getTypeStringKeyword_3_1_1_1_1_0() { return cTypeStringKeyword_3_1_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ModelRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.multimodeldesc.MMDesc.ModelRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdINTTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cUriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriSTRINGTerminalRuleCall_2_0 = (RuleCall)cUriAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cDataAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cDataSTRINGTerminalRuleCall_3_1_0_0 = (RuleCall)cDataAssignment_3_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1_1 = (RuleCall)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_1_2 = (RuleCall)cAlternatives_3_1.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNextAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNextModelRefParserRuleCall_4_1_0 = (RuleCall)cNextAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cContinueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cContinuePlusSignKeyword_5_0 = (Keyword)cContinueAssignment_5.eContents().get(0);
		
		//ModelRef:
		//	'model' id=INT uri=STRING ('[' (data+=STRING | ID | INT)
		//	']')? ('{'
		//	next+=ModelRef*
		//	'}')? continue?='+'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' id=INT uri=STRING ('[' (data+=STRING | ID | INT) ']')? ('{' next+=ModelRef* '}')? continue?='+'?
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//id=INT
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_1_0() { return cIdINTTerminalRuleCall_1_0; }
		
		//uri=STRING
		public Assignment getUriAssignment_2() { return cUriAssignment_2; }
		
		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_2_0() { return cUriSTRINGTerminalRuleCall_2_0; }
		
		//('[' (data+=STRING | ID | INT) ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//data+=STRING | ID | INT
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//data+=STRING
		public Assignment getDataAssignment_3_1_0() { return cDataAssignment_3_1_0; }
		
		//STRING
		public RuleCall getDataSTRINGTerminalRuleCall_3_1_0_0() { return cDataSTRINGTerminalRuleCall_3_1_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1_1() { return cIDTerminalRuleCall_3_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_1_2() { return cINTTerminalRuleCall_3_1_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//('{' next+=ModelRef* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//next+=ModelRef*
		public Assignment getNextAssignment_4_1() { return cNextAssignment_4_1; }
		
		//ModelRef
		public RuleCall getNextModelRefParserRuleCall_4_1_0() { return cNextModelRefParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
		
		//continue?='+'?
		public Assignment getContinueAssignment_5() { return cContinueAssignment_5; }
		
		//'+'
		public Keyword getContinuePlusSignKeyword_5_0() { return cContinuePlusSignKeyword_5_0; }
	}
	public class ModelViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.multimodeldesc.MMDesc.ModelView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelViewAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cViewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cViewedAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cViewedModelRefCrossReference_3_0_0 = (CrossReference)cViewedAssignment_3_0.eContents().get(0);
		private final RuleCall cViewedModelRefIDTerminalRuleCall_3_0_0_1 = (RuleCall)cViewedModelRefCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cViewedAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cViewedModelRefCrossReference_3_1_1_0 = (CrossReference)cViewedAssignment_3_1_1.eContents().get(0);
		private final RuleCall cViewedModelRefIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cViewedModelRefCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModelView:
		//	{ModelView}
		//	'view' '[' (viewed+=[ModelRef] (',' viewed+=[ModelRef])*)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ModelView} 'view' '[' (viewed+=[ModelRef] (',' viewed+=[ModelRef])*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{ModelView}
		public Action getModelViewAction_0() { return cModelViewAction_0; }
		
		//'view'
		public Keyword getViewKeyword_1() { return cViewKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(viewed+=[ModelRef] (',' viewed+=[ModelRef])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//viewed+=[ModelRef]
		public Assignment getViewedAssignment_3_0() { return cViewedAssignment_3_0; }
		
		//[ModelRef]
		public CrossReference getViewedModelRefCrossReference_3_0_0() { return cViewedModelRefCrossReference_3_0_0; }
		
		//ID
		public RuleCall getViewedModelRefIDTerminalRuleCall_3_0_0_1() { return cViewedModelRefIDTerminalRuleCall_3_0_0_1; }
		
		//(',' viewed+=[ModelRef])*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//viewed+=[ModelRef]
		public Assignment getViewedAssignment_3_1_1() { return cViewedAssignment_3_1_1; }
		
		//[ModelRef]
		public CrossReference getViewedModelRefCrossReference_3_1_1_0() { return cViewedModelRefCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getViewedModelRefIDTerminalRuleCall_3_1_1_0_1() { return cViewedModelRefIDTerminalRuleCall_3_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	
	
	private final MMDescElements pMMDesc;
	private final PointDescElements pPointDesc;
	private final ModelRefElements pModelRef;
	private final ModelViewElements pModelView;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MMDescGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMMDesc = new MMDescElements();
		this.pPointDesc = new PointDescElements();
		this.pModelRef = new ModelRefElements();
		this.pModelView = new ModelViewElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.multimodeldesc.MMDesc".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MMDesc:
	//	pointDesc=PointDesc
	//	models+=ModelRef*
	//	view=ModelView?;
	public MMDescElements getMMDescAccess() {
		return pMMDesc;
	}
	
	public ParserRule getMMDescRule() {
		return getMMDescAccess().getRule();
	}
	
	//PointDesc:
	//	{PointDesc}
	//	'PointDesc' '[' (type+='Integer' | type+='String' (',' (type+='Integer' | type+='String'))*)?
	//	']';
	public PointDescElements getPointDescAccess() {
		return pPointDesc;
	}
	
	public ParserRule getPointDescRule() {
		return getPointDescAccess().getRule();
	}
	
	//ModelRef:
	//	'model' id=INT uri=STRING ('[' (data+=STRING | ID | INT)
	//	']')? ('{'
	//	next+=ModelRef*
	//	'}')? continue?='+'?;
	public ModelRefElements getModelRefAccess() {
		return pModelRef;
	}
	
	public ParserRule getModelRefRule() {
		return getModelRefAccess().getRule();
	}
	
	//ModelView:
	//	{ModelView}
	//	'view' '[' (viewed+=[ModelRef] (',' viewed+=[ModelRef])*)?
	//	']';
	public ModelViewElements getModelViewAccess() {
		return pModelView;
	}
	
	public ParserRule getModelViewRule() {
		return getModelViewAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
