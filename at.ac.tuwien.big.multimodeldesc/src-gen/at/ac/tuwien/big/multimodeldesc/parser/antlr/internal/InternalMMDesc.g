/*
 * generated by Xtext 2.11.0
 */
grammar InternalMMDesc;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package at.ac.tuwien.big.multimodeldesc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.tuwien.big.multimodeldesc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.tuwien.big.multimodeldesc.services.MMDescGrammarAccess;

}

@parser::members {

 	private MMDescGrammarAccess grammarAccess;

    public InternalMMDescParser(TokenStream input, MMDescGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MMDesc";
   	}

   	@Override
   	protected MMDescGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMMDesc
entryRuleMMDesc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMMDescRule()); }
	iv_ruleMMDesc=ruleMMDesc
	{ $current=$iv_ruleMMDesc.current; }
	EOF;

// Rule MMDesc
ruleMMDesc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMMDescAccess().getPointDescPointDescParserRuleCall_0_0());
				}
				lv_pointDesc_0_0=rulePointDesc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMDescRule());
					}
					set(
						$current,
						"pointDesc",
						lv_pointDesc_0_0,
						"at.ac.tuwien.big.multimodeldesc.MMDesc.PointDesc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMMDescAccess().getModelsModelRefParserRuleCall_1_0());
				}
				lv_models_1_0=ruleModelRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMDescRule());
					}
					add(
						$current,
						"models",
						lv_models_1_0,
						"at.ac.tuwien.big.multimodeldesc.MMDesc.ModelRef");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMMDescAccess().getViewModelViewParserRuleCall_2_0());
				}
				lv_view_2_0=ruleModelView
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMDescRule());
					}
					set(
						$current,
						"view",
						lv_view_2_0,
						"at.ac.tuwien.big.multimodeldesc.MMDesc.ModelView");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePointDesc
entryRulePointDesc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointDescRule()); }
	iv_rulePointDesc=rulePointDesc
	{ $current=$iv_rulePointDesc.current; }
	EOF;

// Rule PointDesc
rulePointDesc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPointDescAccess().getPointDescAction_0(),
					$current);
			}
		)
		otherlv_1='PointDesc'
		{
			newLeafNode(otherlv_1, grammarAccess.getPointDescAccess().getPointDescKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getPointDescAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				(
					lv_type_3_0='Integer'
					{
						newLeafNode(lv_type_3_0, grammarAccess.getPointDescAccess().getTypeIntegerKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPointDescRule());
						}
						addWithLastConsumed($current, "type", lv_type_3_0, "Integer");
					}
				)
			)
			    |
			(
				(
					(
						lv_type_4_0='String'
						{
							newLeafNode(lv_type_4_0, grammarAccess.getPointDescAccess().getTypeStringKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPointDescRule());
							}
							addWithLastConsumed($current, "type", lv_type_4_0, "String");
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getPointDescAccess().getCommaKeyword_3_1_1_0());
					}
					(
						(
							(
								lv_type_6_0='Integer'
								{
									newLeafNode(lv_type_6_0, grammarAccess.getPointDescAccess().getTypeIntegerKeyword_3_1_1_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getPointDescRule());
									}
									addWithLastConsumed($current, "type", lv_type_6_0, "Integer");
								}
							)
						)
						    |
						(
							(
								lv_type_7_0='String'
								{
									newLeafNode(lv_type_7_0, grammarAccess.getPointDescAccess().getTypeStringKeyword_3_1_1_1_1_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getPointDescRule());
									}
									addWithLastConsumed($current, "type", lv_type_7_0, "String");
								}
							)
						)
					)
				)*
			)
		)?
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getPointDescAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleModelRef
entryRuleModelRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRefRule()); }
	iv_ruleModelRef=ruleModelRef
	{ $current=$iv_ruleModelRef.current; }
	EOF;

// Rule ModelRef
ruleModelRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelRefAccess().getModelKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_INT
				{
					newLeafNode(lv_id_1_0, grammarAccess.getModelRefAccess().getIdINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRefRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_uri_2_0=RULE_STRING
				{
					newLeafNode(lv_uri_2_0, grammarAccess.getModelRefAccess().getUriSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRefRule());
					}
					setWithLastConsumed(
						$current,
						"uri",
						lv_uri_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getModelRefAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					(
						lv_data_4_0=RULE_STRING
						{
							newLeafNode(lv_data_4_0, grammarAccess.getModelRefAccess().getDataSTRINGTerminalRuleCall_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelRefRule());
							}
							addWithLastConsumed(
								$current,
								"data",
								lv_data_4_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				    |
				this_ID_5=RULE_ID
				{
					newLeafNode(this_ID_5, grammarAccess.getModelRefAccess().getIDTerminalRuleCall_3_1_1());
				}
				    |
				this_INT_6=RULE_INT
				{
					newLeafNode(this_INT_6, grammarAccess.getModelRefAccess().getINTTerminalRuleCall_3_1_2());
				}
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getModelRefAccess().getRightSquareBracketKeyword_3_2());
			}
		)?
		(
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getModelRefAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelRefAccess().getNextModelRefParserRuleCall_4_1_0());
					}
					lv_next_9_0=ruleModelRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRefRule());
						}
						add(
							$current,
							"next",
							lv_next_9_0,
							"at.ac.tuwien.big.multimodeldesc.MMDesc.ModelRef");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getModelRefAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
		(
			(
				lv_continue_11_0='+'
				{
					newLeafNode(lv_continue_11_0, grammarAccess.getModelRefAccess().getContinuePlusSignKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRefRule());
					}
					setWithLastConsumed($current, "continue", true, "+");
				}
			)
		)?
	)
;

// Entry rule entryRuleModelView
entryRuleModelView returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelViewRule()); }
	iv_ruleModelView=ruleModelView
	{ $current=$iv_ruleModelView.current; }
	EOF;

// Rule ModelView
ruleModelView returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelViewAccess().getModelViewAction_0(),
					$current);
			}
		)
		otherlv_1='view'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelViewAccess().getViewKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getModelViewAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModelViewRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getModelViewAccess().getViewedModelRefCrossReference_3_0_0());
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getModelViewAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelViewRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getModelViewAccess().getViewedModelRefCrossReference_3_1_1_0());
						}
					)
				)
			)*
		)?
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getModelViewAccess().getRightSquareBracketKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
