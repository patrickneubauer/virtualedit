/*
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.multimodeldesc.serializer;

import at.ac.tuwien.big.multimodeldesc.mMDesc.MMDesc;
import at.ac.tuwien.big.multimodeldesc.mMDesc.MMDescPackage;
import at.ac.tuwien.big.multimodeldesc.mMDesc.ModelRef;
import at.ac.tuwien.big.multimodeldesc.mMDesc.ModelView;
import at.ac.tuwien.big.multimodeldesc.mMDesc.PointDesc;
import at.ac.tuwien.big.multimodeldesc.services.MMDescGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class MMDescSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MMDescGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MMDescPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MMDescPackage.MM_DESC:
				sequence_MMDesc(context, (MMDesc) semanticObject); 
				return; 
			case MMDescPackage.MODEL_REF:
				sequence_ModelRef(context, (ModelRef) semanticObject); 
				return; 
			case MMDescPackage.MODEL_VIEW:
				sequence_ModelView(context, (ModelView) semanticObject); 
				return; 
			case MMDescPackage.POINT_DESC:
				sequence_PointDesc(context, (PointDesc) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MMDesc returns MMDesc
	 *
	 * Constraint:
	 *     (pointDesc=PointDesc models+=ModelRef* view=ModelView?)
	 */
	protected void sequence_MMDesc(ISerializationContext context, MMDesc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelRef returns ModelRef
	 *
	 * Constraint:
	 *     (id=INT uri=STRING data+=STRING? next+=ModelRef* continue?='+'?)
	 */
	protected void sequence_ModelRef(ISerializationContext context, ModelRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelView returns ModelView
	 *
	 * Constraint:
	 *     (viewed+=[ModelRef|ID] viewed+=[ModelRef|ID]*)?
	 */
	protected void sequence_ModelView(ISerializationContext context, ModelView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PointDesc returns PointDesc
	 *
	 * Constraint:
	 *     (type+='Integer' | (type+='String' (type+='Integer' | type+='String')*))?
	 */
	protected void sequence_PointDesc(ISerializationContext context, PointDesc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
