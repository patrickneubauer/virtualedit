/*
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.multimodeldesc.serializer;

import at.ac.tuwien.big.multimodeldesc.services.MMDescGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MMDescSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MMDescGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ModelRef___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q;
	protected AbstractElementAlias match_ModelRef___LeftSquareBracketKeyword_3_0___IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2___RightSquareBracketKeyword_3_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MMDescGrammarAccess) access;
		match_ModelRef___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getModelRefAccess().getLeftCurlyBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getModelRefAccess().getRightCurlyBracketKeyword_4_2()));
		match_ModelRef___LeftSquareBracketKeyword_3_0___IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2___RightSquareBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getModelRefAccess().getLeftSquareBracketKeyword_3_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getModelRefAccess().getIDTerminalRuleCall_3_1_1()), new TokenAlias(false, false, grammarAccess.getModelRefAccess().getINTTerminalRuleCall_3_1_2())), new TokenAlias(false, false, grammarAccess.getModelRefAccess().getRightSquareBracketKeyword_3_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ModelRef___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q.equals(syntax))
				emit_ModelRef___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ModelRef___LeftSquareBracketKeyword_3_0___IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2___RightSquareBracketKeyword_3_2__q.equals(syntax))
				emit_ModelRef___LeftSquareBracketKeyword_3_0___IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2___RightSquareBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     data+=STRING ']' (ambiguity) (rule end)
	 *     data+=STRING ']' (ambiguity) continue?='+'
	 *     uri=STRING ('[' (ID | INT) ']')? (ambiguity) (rule end)
	 *     uri=STRING ('[' (ID | INT) ']')? (ambiguity) continue?='+'
	 */
	protected void emit_ModelRef___LeftCurlyBracketKeyword_4_0_RightCurlyBracketKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' (ID | INT) ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     uri=STRING (ambiguity) '{' next+=ModelRef
	 *     uri=STRING (ambiguity) ('{' '}')? (rule end)
	 *     uri=STRING (ambiguity) ('{' '}')? continue?='+'
	 */
	protected void emit_ModelRef___LeftSquareBracketKeyword_3_0___IDTerminalRuleCall_3_1_1_or_INTTerminalRuleCall_3_1_2___RightSquareBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
