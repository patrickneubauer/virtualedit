/*
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimplejavaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SimpleJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.SimpleJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageDeclarationParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cClazzAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClazzClassDeclarationParserRuleCall_2_0 = (RuleCall)cClazzAssignment_2.eContents().get(0);
		
		//SimpleJava:
		//	package=PackageDeclaration
		//	imports+=Import*
		//	clazz=ClassDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//package=PackageDeclaration imports+=Import* clazz=ClassDeclaration
		public Group getGroup() { return cGroup; }
		
		//package=PackageDeclaration
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//PackageDeclaration
		public RuleCall getPackagePackageDeclarationParserRuleCall_0_0() { return cPackagePackageDeclarationParserRuleCall_0_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//clazz=ClassDeclaration
		public Assignment getClazzAssignment_2() { return cClazzAssignment_2; }
		
		//ClassDeclaration
		public RuleCall getClazzClassDeclarationParserRuleCall_2_0() { return cClazzClassDeclarationParserRuleCall_2_0; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageDeclaration:
		//	'package' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' imported=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' imported=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//imported=QualifiedNameWithWildcard
		public Assignment getImportedAssignment_1() { return cImportedAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cAttributeAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cAttributeParameterParserRuleCall_4_0_0_0 = (RuleCall)cAttributeAssignment_4_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cMethodAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_4_1_0 = (RuleCall)cMethodAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassDeclaration:
		//	'public' 'class' name=ID '{' (attribute+=Parameter ';' | method+=Method)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' 'class' name=ID '{' (attribute+=Parameter ';' | method+=Method)* '}'
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(attribute+=Parameter ';' | method+=Method)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//attribute+=Parameter ';'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//attribute+=Parameter
		public Assignment getAttributeAssignment_4_0_0() { return cAttributeAssignment_4_0_0; }
		
		//Parameter
		public RuleCall getAttributeParameterParserRuleCall_4_0_0_0() { return cAttributeParameterParserRuleCall_4_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0_1() { return cSemicolonKeyword_4_0_1; }
		
		//method+=Method
		public Assignment getMethodAssignment_4_1() { return cMethodAssignment_4_1; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_4_1_0() { return cMethodMethodParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cTypeNameAlternatives_0_0 = (Alternatives)cTypeNameAssignment_0.eContents().get(0);
		private final Keyword cTypeNameIntKeyword_0_0_0 = (Keyword)cTypeNameAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeNameDoubleKeyword_0_0_1 = (Keyword)cTypeNameAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeNameStringKeyword_0_0_2 = (Keyword)cTypeNameAlternatives_0_0.eContents().get(2);
		private final Keyword cTypeNameBooleanKeyword_0_0_3 = (Keyword)cTypeNameAlternatives_0_0.eContents().get(3);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cTypeRefClassDeclarationCrossReference_1_0 = (CrossReference)cTypeRefAssignment_1.eContents().get(0);
		private final RuleCall cTypeRefClassDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeRefClassDeclarationCrossReference_1_0.eContents().get(1);
		
		//Type:
		//	typeName=('int' | 'double' | 'String' | 'boolean') | typeRef=[ClassDeclaration|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('int' | 'double' | 'String' | 'boolean') | typeRef=[ClassDeclaration|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeName=('int' | 'double' | 'String' | 'boolean')
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//('int' | 'double' | 'String' | 'boolean')
		public Alternatives getTypeNameAlternatives_0_0() { return cTypeNameAlternatives_0_0; }
		
		//'int'
		public Keyword getTypeNameIntKeyword_0_0_0() { return cTypeNameIntKeyword_0_0_0; }
		
		//'double'
		public Keyword getTypeNameDoubleKeyword_0_0_1() { return cTypeNameDoubleKeyword_0_0_1; }
		
		//'String'
		public Keyword getTypeNameStringKeyword_0_0_2() { return cTypeNameStringKeyword_0_0_2; }
		
		//'boolean'
		public Keyword getTypeNameBooleanKeyword_0_0_3() { return cTypeNameBooleanKeyword_0_0_3; }
		
		//typeRef=[ClassDeclaration|QualifiedName]
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }
		
		//[ClassDeclaration|QualifiedName]
		public CrossReference getTypeRefClassDeclarationCrossReference_1_0() { return cTypeRefClassDeclarationCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeRefClassDeclarationQualifiedNameParserRuleCall_1_0_1() { return cTypeRefClassDeclarationQualifiedNameParserRuleCall_1_0_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cVoidKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_2_1_0 = (RuleCall)cReturnTypeAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParameterAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_5_0_0 = (RuleCall)cParameterAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParameterAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_5_1_1_0 = (RuleCall)cParameterAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContentMethodBlockParserRuleCall_7_0 = (RuleCall)cContentAssignment_7.eContents().get(0);
		
		//Method:
		//	'public' static?='static'? ('void' | returnType=Type) name=ID '(' (parameter+=Parameter (',' parameter+=Parameter)*)?
		//	')' content=MethodBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'public' static?='static'? ('void' | returnType=Type) name=ID '(' (parameter+=Parameter (',' parameter+=Parameter)*)?
		//')' content=MethodBlock
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }
		
		//('void' | returnType=Type)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'void'
		public Keyword getVoidKeyword_2_0() { return cVoidKeyword_2_0; }
		
		//returnType=Type
		public Assignment getReturnTypeAssignment_2_1() { return cReturnTypeAssignment_2_1; }
		
		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_2_1_0() { return cReturnTypeTypeParserRuleCall_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(parameter+=Parameter (',' parameter+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_5_0() { return cParameterAssignment_5_0; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_5_0_0() { return cParameterParameterParserRuleCall_5_0_0; }
		
		//(',' parameter+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_5_1_1() { return cParameterAssignment_5_1_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_5_1_1_0() { return cParameterParameterParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//content=MethodBlock
		public Assignment getContentAssignment_7() { return cContentAssignment_7; }
		
		//MethodBlock
		public RuleCall getContentMethodBlockParserRuleCall_7_0() { return cContentMethodBlockParserRuleCall_7_0; }
	}
	public class MethodBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.MethodBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGeneratedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGeneratedPointcutblockKeyword_1_0 = (Keyword)cGeneratedAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//MethodBlock:
		//	{MethodBlock} generated?='pointcutblock'? ('{'
		//	statements+=Statement*
		//	'}');
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodBlock} generated?='pointcutblock'? ('{' statements+=Statement* '}')
		public Group getGroup() { return cGroup; }
		
		//{MethodBlock}
		public Action getMethodBlockAction_0() { return cMethodBlockAction_0; }
		
		//generated?='pointcutblock'?
		public Assignment getGeneratedAssignment_1() { return cGeneratedAssignment_1; }
		
		//'pointcutblock'
		public Keyword getGeneratedPointcutblockKeyword_1_0() { return cGeneratedPointcutblockKeyword_1_0; }
		
		//('{' statements+=Statement* '}')
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_1_0() { return cStatementsStatementParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.SimpleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleStatement:
		//	SimpleVariableDeclaration | Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleVariableDeclaration | Assignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleVariableDeclaration
		public RuleCall getSimpleVariableDeclarationParserRuleCall_0() { return cSimpleVariableDeclarationParserRuleCall_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForInStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWhileStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMethodCallParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement:
		//	MethodBlock | VariableDeclaration | Assignment | IfStatement | ForStatement | ForInStatement | WhileStatement |
		//	ReturnStatement
		//	| MethodCall;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodBlock | VariableDeclaration | Assignment | IfStatement | ForStatement | ForInStatement | WhileStatement |
		//ReturnStatement | MethodCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodBlock
		public RuleCall getMethodBlockParserRuleCall_0() { return cMethodBlockParserRuleCall_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_2() { return cAssignmentParserRuleCall_2; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_3() { return cIfStatementParserRuleCall_3; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }
		
		//ForInStatement
		public RuleCall getForInStatementParserRuleCall_5() { return cForInStatementParserRuleCall_5; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_6() { return cWhileStatementParserRuleCall_6; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_7() { return cReturnStatementParserRuleCall_7; }
		
		//MethodCall
		public RuleCall getMethodCallParserRuleCall_8() { return cMethodCallParserRuleCall_8; }
	}
	public class SimpleVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.SimpleVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionGenericExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//SimpleVariableDeclaration:
		//	{VariableDeclaration} parameter=Parameter '=' expression=GenericExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDeclaration} parameter=Parameter '=' expression=GenericExpression
		public Group getGroup() { return cGroup; }
		
		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }
		
		//parameter=Parameter
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_1_0() { return cParameterParameterParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//expression=GenericExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//GenericExpression
		public RuleCall getExpressionGenericExpressionParserRuleCall_3_0() { return cExpressionGenericExpressionParserRuleCall_3_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionGenericExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableDeclaration:
		//	parameter=Parameter '=' expression=GenericExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=Parameter '=' expression=GenericExpression ';'
		public Group getGroup() { return cGroup; }
		
		//parameter=Parameter
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_0_0() { return cParameterParameterParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=GenericExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//GenericExpression
		public RuleCall getExpressionGenericExpressionParserRuleCall_2_0() { return cExpressionGenericExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterParameterCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterParameterQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cParameterParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionGenericExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assignment:
		//	parameter=[Parameter|QualifiedName] '=' expression=GenericExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=[Parameter|QualifiedName] '=' expression=GenericExpression ';'
		public Group getGroup() { return cGroup; }
		
		//parameter=[Parameter|QualifiedName]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }
		
		//[Parameter|QualifiedName]
		public CrossReference getParameterParameterCrossReference_0_0() { return cParameterParameterCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getParameterParameterQualifiedNameParserRuleCall_0_0_1() { return cParameterParameterQualifiedNameParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=GenericExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//GenericExpression
		public RuleCall getExpressionGenericExpressionParserRuleCall_2_0() { return cExpressionGenericExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionParanthesisOrBinaryExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenMethodBlockParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseMethodBlockParserRuleCall_3_1_0 = (RuleCall)cElseAssignment_3_1.eContents().get(0);
		
		//IfStatement:
		//	'if' condition=ParanthesisOrBinaryExpression then=MethodBlock ('else' else=MethodBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=ParanthesisOrBinaryExpression then=MethodBlock ('else' else=MethodBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=ParanthesisOrBinaryExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ParanthesisOrBinaryExpression
		public RuleCall getConditionParanthesisOrBinaryExpressionParserRuleCall_1_0() { return cConditionParanthesisOrBinaryExpressionParserRuleCall_1_0; }
		
		//then=MethodBlock
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }
		
		//MethodBlock
		public RuleCall getThenMethodBlockParserRuleCall_2_0() { return cThenMethodBlockParserRuleCall_2_0; }
		
		//('else' else=MethodBlock)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//else=MethodBlock
		public Assignment getElseAssignment_3_1() { return cElseAssignment_3_1; }
		
		//MethodBlock
		public RuleCall getElseMethodBlockParserRuleCall_3_1_0() { return cElseMethodBlockParserRuleCall_3_1_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitSimpleStatementParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionGenericExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cContinuationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContinuationSimpleStatementParserRuleCall_6_0 = (RuleCall)cContinuationAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStatementParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	'for' '(' init=SimpleStatement? ';' condition=GenericExpression ';' continuation=SimpleStatement ')' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' init=SimpleStatement? ';' condition=GenericExpression ';' continuation=SimpleStatement ')' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//init=SimpleStatement?
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }
		
		//SimpleStatement
		public RuleCall getInitSimpleStatementParserRuleCall_2_0() { return cInitSimpleStatementParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=GenericExpression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//GenericExpression
		public RuleCall getConditionGenericExpressionParserRuleCall_4_0() { return cConditionGenericExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//continuation=SimpleStatement
		public Assignment getContinuationAssignment_6() { return cContinuationAssignment_6; }
		
		//SimpleStatement
		public RuleCall getContinuationSimpleStatementParserRuleCall_6_0() { return cContinuationSimpleStatementParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=Statement
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_8_0() { return cBodyStatementParserRuleCall_8_0; }
	}
	public class ForInStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.ForInStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubparameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubparameterParameterParserRuleCall_2_0 = (RuleCall)cSubparameterAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionGenericExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//ForInStatement:
		//	'for' '(' subparameter=Parameter ':' expression=GenericExpression ')' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' subparameter=Parameter ':' expression=GenericExpression ')' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//subparameter=Parameter
		public Assignment getSubparameterAssignment_2() { return cSubparameterAssignment_2; }
		
		//Parameter
		public RuleCall getSubparameterParameterParserRuleCall_2_0() { return cSubparameterParameterParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//expression=GenericExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//GenericExpression
		public RuleCall getExpressionGenericExpressionParserRuleCall_4_0() { return cExpressionGenericExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=Statement
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_6_0() { return cBodyStatementParserRuleCall_6_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionParanthesisOrBinaryExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//WhileStatement:
		//	'while' condition=ParanthesisOrBinaryExpression body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=ParanthesisOrBinaryExpression body=Statement
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=ParanthesisOrBinaryExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ParanthesisOrBinaryExpression
		public RuleCall getConditionParanthesisOrBinaryExpressionParserRuleCall_1_0() { return cConditionParanthesisOrBinaryExpressionParserRuleCall_1_0; }
		
		//body=Statement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_2_0() { return cBodyStatementParserRuleCall_2_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionGenericExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatement:
		//	'return' expression=GenericExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expression=GenericExpression ';'
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=GenericExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//GenericExpression
		public RuleCall getExpressionGenericExpressionParserRuleCall_1_0() { return cExpressionGenericExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0_0 = (Alternatives)cGroup_0_0_0.eContents().get(0);
		private final Assignment cObjectAssignment_0_0_0_0_0 = (Assignment)cAlternatives_0_0_0_0.eContents().get(0);
		private final CrossReference cObjectParameterCrossReference_0_0_0_0_0_0 = (CrossReference)cObjectAssignment_0_0_0_0_0.eContents().get(0);
		private final RuleCall cObjectParameterQualifiedNameParserRuleCall_0_0_0_0_0_0_1 = (RuleCall)cObjectParameterCrossReference_0_0_0_0_0_0.eContents().get(1);
		private final Assignment cThisObjectAssignment_0_0_0_0_1 = (Assignment)cAlternatives_0_0_0_0.eContents().get(1);
		private final Keyword cThisObjectThisKeyword_0_0_0_0_1_0 = (Keyword)cThisObjectAssignment_0_0_0_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Assignment cMethodAssignment_0_0_1_0 = (Assignment)cAlternatives_0_0_1.eContents().get(0);
		private final CrossReference cMethodMethodCrossReference_0_0_1_0_0 = (CrossReference)cMethodAssignment_0_0_1_0.eContents().get(0);
		private final RuleCall cMethodMethodIDTerminalRuleCall_0_0_1_0_0_1 = (RuleCall)cMethodMethodCrossReference_0_0_1_0_0.eContents().get(1);
		private final Assignment cMethodNameAssignment_0_0_1_1 = (Assignment)cAlternatives_0_0_1.eContents().get(1);
		private final Alternatives cMethodNameAlternatives_0_0_1_1_0 = (Alternatives)cMethodNameAssignment_0_0_1_1.eContents().get(0);
		private final Keyword cMethodNameEqualsKeyword_0_0_1_1_0_0 = (Keyword)cMethodNameAlternatives_0_0_1_1_0.eContents().get(0);
		private final Keyword cMethodNameHashCodeKeyword_0_0_1_1_0_1 = (Keyword)cMethodNameAlternatives_0_0_1_1_0.eContents().get(1);
		private final Assignment cMethodNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cMethodNameSystemOutPrintlnKeyword_0_1_0 = (Keyword)cMethodNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterGenericExpressionParserRuleCall_2_0_0 = (RuleCall)cParameterAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterGenericExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParameterAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodCall:
		//	(((object=[Parameter|QualifiedName] | thisObject?='this') '.')? (method=[Method] | methodName=('equals' |
		//	'hashCode')) | methodName='System.out.println')
		//	'(' (parameter+=GenericExpression (',' parameter+=GenericExpression)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(((object=[Parameter|QualifiedName] | thisObject?='this') '.')? (method=[Method] | methodName=('equals' | 'hashCode')) |
		//methodName='System.out.println') '(' (parameter+=GenericExpression (',' parameter+=GenericExpression)*)? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//(((object=[Parameter|QualifiedName] | thisObject?='this') '.')? (method=[Method] | methodName=('equals' | 'hashCode')) |
		//methodName='System.out.println')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//((object=[Parameter|QualifiedName] | thisObject?='this') '.')? (method=[Method] | methodName=('equals' | 'hashCode'))
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//((object=[Parameter|QualifiedName] | thisObject?='this') '.')?
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//(object=[Parameter|QualifiedName] | thisObject?='this')
		public Alternatives getAlternatives_0_0_0_0() { return cAlternatives_0_0_0_0; }
		
		//object=[Parameter|QualifiedName]
		public Assignment getObjectAssignment_0_0_0_0_0() { return cObjectAssignment_0_0_0_0_0; }
		
		//[Parameter|QualifiedName]
		public CrossReference getObjectParameterCrossReference_0_0_0_0_0_0() { return cObjectParameterCrossReference_0_0_0_0_0_0; }
		
		//QualifiedName
		public RuleCall getObjectParameterQualifiedNameParserRuleCall_0_0_0_0_0_0_1() { return cObjectParameterQualifiedNameParserRuleCall_0_0_0_0_0_0_1; }
		
		//thisObject?='this'
		public Assignment getThisObjectAssignment_0_0_0_0_1() { return cThisObjectAssignment_0_0_0_0_1; }
		
		//'this'
		public Keyword getThisObjectThisKeyword_0_0_0_0_1_0() { return cThisObjectThisKeyword_0_0_0_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0_0_1() { return cFullStopKeyword_0_0_0_1; }
		
		//(method=[Method] | methodName=('equals' | 'hashCode'))
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }
		
		//method=[Method]
		public Assignment getMethodAssignment_0_0_1_0() { return cMethodAssignment_0_0_1_0; }
		
		//[Method]
		public CrossReference getMethodMethodCrossReference_0_0_1_0_0() { return cMethodMethodCrossReference_0_0_1_0_0; }
		
		//ID
		public RuleCall getMethodMethodIDTerminalRuleCall_0_0_1_0_0_1() { return cMethodMethodIDTerminalRuleCall_0_0_1_0_0_1; }
		
		//methodName=('equals' | 'hashCode')
		public Assignment getMethodNameAssignment_0_0_1_1() { return cMethodNameAssignment_0_0_1_1; }
		
		//('equals' | 'hashCode')
		public Alternatives getMethodNameAlternatives_0_0_1_1_0() { return cMethodNameAlternatives_0_0_1_1_0; }
		
		//'equals'
		public Keyword getMethodNameEqualsKeyword_0_0_1_1_0_0() { return cMethodNameEqualsKeyword_0_0_1_1_0_0; }
		
		//'hashCode'
		public Keyword getMethodNameHashCodeKeyword_0_0_1_1_0_1() { return cMethodNameHashCodeKeyword_0_0_1_1_0_1; }
		
		//methodName='System.out.println'
		public Assignment getMethodNameAssignment_0_1() { return cMethodNameAssignment_0_1; }
		
		//'System.out.println'
		public Keyword getMethodNameSystemOutPrintlnKeyword_0_1_0() { return cMethodNameSystemOutPrintlnKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameter+=GenericExpression (',' parameter+=GenericExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameter+=GenericExpression
		public Assignment getParameterAssignment_2_0() { return cParameterAssignment_2_0; }
		
		//GenericExpression
		public RuleCall getParameterGenericExpressionParserRuleCall_2_0_0() { return cParameterGenericExpressionParserRuleCall_2_0_0; }
		
		//(',' parameter+=GenericExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameter+=GenericExpression
		public Assignment getParameterAssignment_2_1_1() { return cParameterAssignment_2_1_1; }
		
		//GenericExpression
		public RuleCall getParameterGenericExpressionParserRuleCall_2_1_1_0() { return cParameterGenericExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class GenericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.GenericExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParanthesisOrBinaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnaryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//GenericExpression:
		//	VariableExpression | MethodCall | ParanthesisOrBinaryExpression | UnaryExpression | ConstantExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableExpression | MethodCall | ParanthesisOrBinaryExpression | UnaryExpression | ConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableExpression
		public RuleCall getVariableExpressionParserRuleCall_0() { return cVariableExpressionParserRuleCall_0; }
		
		//MethodCall
		public RuleCall getMethodCallParserRuleCall_1() { return cMethodCallParserRuleCall_1; }
		
		//ParanthesisOrBinaryExpression
		public RuleCall getParanthesisOrBinaryExpressionParserRuleCall_2() { return cParanthesisOrBinaryExpressionParserRuleCall_2; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_3() { return cUnaryExpressionParserRuleCall_3; }
		
		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_4() { return cConstantExpressionParserRuleCall_4; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.ConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConstantExpression:
		//	IntegerExpression | StringExpression | BooleanExpression | NullExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerExpression | StringExpression | BooleanExpression | NullExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerExpression
		public RuleCall getIntegerExpressionParserRuleCall_0() { return cIntegerExpressionParserRuleCall_0; }
		
		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_1() { return cStringExpressionParserRuleCall_1; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_2() { return cBooleanExpressionParserRuleCall_2; }
		
		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_3() { return cNullExpressionParserRuleCall_3; }
	}
	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.NullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullExpression:
		//	{NullExpression} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullExpression} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullExpression}
		public Action getNullExpressionAction_0() { return cNullExpressionAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class IntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.IntegerExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerExpression:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanExpression:
		//	{BooleanExpression} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanExpression} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{BooleanExpression}
		public Action getBooleanExpressionAction_0() { return cBooleanExpressionAction_0; }
		
		//(value?='true' | 'false')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.StringExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringExpression:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeExclamationMarkKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceGenericExpressionParserRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//	type='!' source=GenericExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//type='!' source=GenericExpression
		public Group getGroup() { return cGroup; }
		
		//type='!'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'!'
		public Keyword getTypeExclamationMarkKeyword_0_0() { return cTypeExclamationMarkKeyword_0_0; }
		
		//source=GenericExpression
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//GenericExpression
		public RuleCall getSourceGenericExpressionParserRuleCall_1_0() { return cSourceGenericExpressionParserRuleCall_1_0; }
	}
	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.VariableExpression");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableParameterCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableParameterQualifiedNameParserRuleCall_0_1 = (RuleCall)cVariableParameterCrossReference_0.eContents().get(1);
		
		//VariableExpression:
		//	variable=[Parameter|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Parameter|QualifiedName]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Parameter|QualifiedName]
		public CrossReference getVariableParameterCrossReference_0() { return cVariableParameterCrossReference_0; }
		
		//QualifiedName
		public RuleCall getVariableParameterQualifiedNameParserRuleCall_0_1() { return cVariableParameterQualifiedNameParserRuleCall_0_1; }
	}
	public class ParanthesisOrBinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.ParanthesisOrBinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceGenericExpressionParserRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cTypeAlternatives_2_0_0 = (Alternatives)cTypeAssignment_2_0.eContents().get(0);
		private final Keyword cTypeVerticalLineVerticalLineKeyword_2_0_0_0 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(0);
		private final Keyword cTypeAmpersandAmpersandKeyword_2_0_0_1 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(1);
		private final Keyword cTypeAmpersandKeyword_2_0_0_2 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(2);
		private final Keyword cTypePlusSignKeyword_2_0_0_3 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(3);
		private final Keyword cTypeHyphenMinusKeyword_2_0_0_4 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(4);
		private final Keyword cTypeAsteriskKeyword_2_0_0_5 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(5);
		private final Keyword cTypeSolidusKeyword_2_0_0_6 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(6);
		private final Keyword cTypeEqualsSignEqualsSignKeyword_2_0_0_7 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(7);
		private final Keyword cTypeExclamationMarkEqualsSignKeyword_2_0_0_8 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(8);
		private final Keyword cTypeLessThanSignKeyword_2_0_0_9 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(9);
		private final Keyword cTypeLessThanSignEqualsSignKeyword_2_0_0_10 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(10);
		private final Keyword cTypeGreaterThanSignKeyword_2_0_0_11 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(11);
		private final Keyword cTypeGreaterThanSignEqualsSignKeyword_2_0_0_12 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(12);
		private final Assignment cArgumentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentGenericExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParanthesisOrBinaryExpression:
		//	'(' source=GenericExpression (type=('||' | '&&' | '&' | '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '<=' | '>' |
		//	'>=') argument=GenericExpression)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' source=GenericExpression (type=('||' | '&&' | '&' | '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '<=' | '>' | '>=')
		//argument=GenericExpression)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//source=GenericExpression
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//GenericExpression
		public RuleCall getSourceGenericExpressionParserRuleCall_1_0() { return cSourceGenericExpressionParserRuleCall_1_0; }
		
		//(type=('||' | '&&' | '&' | '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '<=' | '>' | '>=') argument=GenericExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//type=('||' | '&&' | '&' | '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '<=' | '>' | '>=')
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//('||' | '&&' | '&' | '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '<=' | '>' | '>=')
		public Alternatives getTypeAlternatives_2_0_0() { return cTypeAlternatives_2_0_0; }
		
		//'||'
		public Keyword getTypeVerticalLineVerticalLineKeyword_2_0_0_0() { return cTypeVerticalLineVerticalLineKeyword_2_0_0_0; }
		
		//'&&'
		public Keyword getTypeAmpersandAmpersandKeyword_2_0_0_1() { return cTypeAmpersandAmpersandKeyword_2_0_0_1; }
		
		//'&'
		public Keyword getTypeAmpersandKeyword_2_0_0_2() { return cTypeAmpersandKeyword_2_0_0_2; }
		
		//'+'
		public Keyword getTypePlusSignKeyword_2_0_0_3() { return cTypePlusSignKeyword_2_0_0_3; }
		
		//'-'
		public Keyword getTypeHyphenMinusKeyword_2_0_0_4() { return cTypeHyphenMinusKeyword_2_0_0_4; }
		
		//'*'
		public Keyword getTypeAsteriskKeyword_2_0_0_5() { return cTypeAsteriskKeyword_2_0_0_5; }
		
		//'/'
		public Keyword getTypeSolidusKeyword_2_0_0_6() { return cTypeSolidusKeyword_2_0_0_6; }
		
		//'=='
		public Keyword getTypeEqualsSignEqualsSignKeyword_2_0_0_7() { return cTypeEqualsSignEqualsSignKeyword_2_0_0_7; }
		
		//'!='
		public Keyword getTypeExclamationMarkEqualsSignKeyword_2_0_0_8() { return cTypeExclamationMarkEqualsSignKeyword_2_0_0_8; }
		
		//'<'
		public Keyword getTypeLessThanSignKeyword_2_0_0_9() { return cTypeLessThanSignKeyword_2_0_0_9; }
		
		//'<='
		public Keyword getTypeLessThanSignEqualsSignKeyword_2_0_0_10() { return cTypeLessThanSignEqualsSignKeyword_2_0_0_10; }
		
		//'>'
		public Keyword getTypeGreaterThanSignKeyword_2_0_0_11() { return cTypeGreaterThanSignKeyword_2_0_0_11; }
		
		//'>='
		public Keyword getTypeGreaterThanSignEqualsSignKeyword_2_0_0_12() { return cTypeGreaterThanSignEqualsSignKeyword_2_0_0_12; }
		
		//argument=GenericExpression
		public Assignment getArgumentAssignment_2_1() { return cArgumentAssignment_2_1; }
		
		//GenericExpression
		public RuleCall getArgumentGenericExpressionParserRuleCall_2_1_0() { return cArgumentGenericExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Simplejava.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final SimpleJavaElements pSimpleJava;
	private final PackageDeclarationElements pPackageDeclaration;
	private final ImportElements pImport;
	private final ClassDeclarationElements pClassDeclaration;
	private final ParameterElements pParameter;
	private final TypeElements pType;
	private final MethodElements pMethod;
	private final MethodBlockElements pMethodBlock;
	private final SimpleStatementElements pSimpleStatement;
	private final StatementElements pStatement;
	private final SimpleVariableDeclarationElements pSimpleVariableDeclaration;
	private final VariableDeclarationElements pVariableDeclaration;
	private final AssignmentElements pAssignment;
	private final IfStatementElements pIfStatement;
	private final ForStatementElements pForStatement;
	private final ForInStatementElements pForInStatement;
	private final WhileStatementElements pWhileStatement;
	private final ReturnStatementElements pReturnStatement;
	private final MethodCallElements pMethodCall;
	private final GenericExpressionElements pGenericExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final NullExpressionElements pNullExpression;
	private final IntegerExpressionElements pIntegerExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final StringExpressionElements pStringExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final VariableExpressionElements pVariableExpression;
	private final ParanthesisOrBinaryExpressionElements pParanthesisOrBinaryExpression;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimplejavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSimpleJava = new SimpleJavaElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pImport = new ImportElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pParameter = new ParameterElements();
		this.pType = new TypeElements();
		this.pMethod = new MethodElements();
		this.pMethodBlock = new MethodBlockElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pStatement = new StatementElements();
		this.pSimpleVariableDeclaration = new SimpleVariableDeclarationElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pAssignment = new AssignmentElements();
		this.pIfStatement = new IfStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pForInStatement = new ForInStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pMethodCall = new MethodCallElements();
		this.pGenericExpression = new GenericExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pNullExpression = new NullExpressionElements();
		this.pIntegerExpression = new IntegerExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pStringExpression = new StringExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pVariableExpression = new VariableExpressionElements();
		this.pParanthesisOrBinaryExpression = new ParanthesisOrBinaryExpressionElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.Simplejava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SimpleJava:
	//	package=PackageDeclaration
	//	imports+=Import*
	//	clazz=ClassDeclaration;
	public SimpleJavaElements getSimpleJavaAccess() {
		return pSimpleJava;
	}
	
	public ParserRule getSimpleJavaRule() {
		return getSimpleJavaAccess().getRule();
	}
	
	//PackageDeclaration:
	//	'package' name=ID ';';
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//Import:
	//	'import' imported=QualifiedNameWithWildcard ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ClassDeclaration:
	//	'public' 'class' name=ID '{' (attribute+=Parameter ';' | method+=Method)*
	//	'}';
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//Parameter:
	//	type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Type:
	//	typeName=('int' | 'double' | 'String' | 'boolean') | typeRef=[ClassDeclaration|QualifiedName];
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Method:
	//	'public' static?='static'? ('void' | returnType=Type) name=ID '(' (parameter+=Parameter (',' parameter+=Parameter)*)?
	//	')' content=MethodBlock;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//MethodBlock:
	//	{MethodBlock} generated?='pointcutblock'? ('{'
	//	statements+=Statement*
	//	'}');
	public MethodBlockElements getMethodBlockAccess() {
		return pMethodBlock;
	}
	
	public ParserRule getMethodBlockRule() {
		return getMethodBlockAccess().getRule();
	}
	
	//SimpleStatement:
	//	SimpleVariableDeclaration | Assignment;
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//Statement:
	//	MethodBlock | VariableDeclaration | Assignment | IfStatement | ForStatement | ForInStatement | WhileStatement |
	//	ReturnStatement
	//	| MethodCall;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SimpleVariableDeclaration:
	//	{VariableDeclaration} parameter=Parameter '=' expression=GenericExpression;
	public SimpleVariableDeclarationElements getSimpleVariableDeclarationAccess() {
		return pSimpleVariableDeclaration;
	}
	
	public ParserRule getSimpleVariableDeclarationRule() {
		return getSimpleVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclaration:
	//	parameter=Parameter '=' expression=GenericExpression ';';
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Assignment:
	//	parameter=[Parameter|QualifiedName] '=' expression=GenericExpression ';';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//IfStatement:
	//	'if' condition=ParanthesisOrBinaryExpression then=MethodBlock ('else' else=MethodBlock)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ForStatement:
	//	'for' '(' init=SimpleStatement? ';' condition=GenericExpression ';' continuation=SimpleStatement ')' body=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ForInStatement:
	//	'for' '(' subparameter=Parameter ':' expression=GenericExpression ')' body=Statement;
	public ForInStatementElements getForInStatementAccess() {
		return pForInStatement;
	}
	
	public ParserRule getForInStatementRule() {
		return getForInStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	'while' condition=ParanthesisOrBinaryExpression body=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	'return' expression=GenericExpression ';';
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//MethodCall:
	//	(((object=[Parameter|QualifiedName] | thisObject?='this') '.')? (method=[Method] | methodName=('equals' |
	//	'hashCode')) | methodName='System.out.println')
	//	'(' (parameter+=GenericExpression (',' parameter+=GenericExpression)*)? ')' ';';
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//GenericExpression:
	//	VariableExpression | MethodCall | ParanthesisOrBinaryExpression | UnaryExpression | ConstantExpression;
	public GenericExpressionElements getGenericExpressionAccess() {
		return pGenericExpression;
	}
	
	public ParserRule getGenericExpressionRule() {
		return getGenericExpressionAccess().getRule();
	}
	
	//ConstantExpression:
	//	IntegerExpression | StringExpression | BooleanExpression | NullExpression;
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//NullExpression:
	//	{NullExpression} 'null';
	public NullExpressionElements getNullExpressionAccess() {
		return pNullExpression;
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	//IntegerExpression:
	//	value=INT;
	public IntegerExpressionElements getIntegerExpressionAccess() {
		return pIntegerExpression;
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}
	
	//BooleanExpression:
	//	{BooleanExpression} (value?='true' | 'false');
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//StringExpression:
	//	value=STRING;
	public StringExpressionElements getStringExpressionAccess() {
		return pStringExpression;
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}
	
	//UnaryExpression:
	//	type='!' source=GenericExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//VariableExpression:
	//	variable=[Parameter|QualifiedName];
	public VariableExpressionElements getVariableExpressionAccess() {
		return pVariableExpression;
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}
	
	//ParanthesisOrBinaryExpression:
	//	'(' source=GenericExpression (type=('||' | '&&' | '&' | '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '<=' | '>' |
	//	'>=') argument=GenericExpression)? ')';
	public ParanthesisOrBinaryExpressionElements getParanthesisOrBinaryExpressionAccess() {
		return pParanthesisOrBinaryExpression;
	}
	
	public ParserRule getParanthesisOrBinaryExpressionRule() {
		return getParanthesisOrBinaryExpressionAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
