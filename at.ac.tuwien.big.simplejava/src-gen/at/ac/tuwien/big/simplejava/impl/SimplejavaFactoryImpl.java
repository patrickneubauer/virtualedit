/**
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.simplejava.impl;

import at.ac.tuwien.big.simplejava.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimplejavaFactoryImpl extends EFactoryImpl implements SimplejavaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SimplejavaFactory init()
  {
    try
    {
      SimplejavaFactory theSimplejavaFactory = (SimplejavaFactory)EPackage.Registry.INSTANCE.getEFactory(SimplejavaPackage.eNS_URI);
      if (theSimplejavaFactory != null)
      {
        return theSimplejavaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SimplejavaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimplejavaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SimplejavaPackage.SIMPLE_JAVA: return createSimpleJava();
      case SimplejavaPackage.PACKAGE_DECLARATION: return createPackageDeclaration();
      case SimplejavaPackage.IMPORT: return createImport();
      case SimplejavaPackage.CLASS_DECLARATION: return createClassDeclaration();
      case SimplejavaPackage.PARAMETER: return createParameter();
      case SimplejavaPackage.TYPE: return createType();
      case SimplejavaPackage.METHOD: return createMethod();
      case SimplejavaPackage.METHOD_BLOCK: return createMethodBlock();
      case SimplejavaPackage.SIMPLE_STATEMENT: return createSimpleStatement();
      case SimplejavaPackage.STATEMENT: return createStatement();
      case SimplejavaPackage.SIMPLE_VARIABLE_DECLARATION: return createSimpleVariableDeclaration();
      case SimplejavaPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case SimplejavaPackage.ASSIGNMENT: return createAssignment();
      case SimplejavaPackage.IF_STATEMENT: return createIfStatement();
      case SimplejavaPackage.FOR_STATEMENT: return createForStatement();
      case SimplejavaPackage.FOR_IN_STATEMENT: return createForInStatement();
      case SimplejavaPackage.WHILE_STATEMENT: return createWhileStatement();
      case SimplejavaPackage.RETURN_STATEMENT: return createReturnStatement();
      case SimplejavaPackage.METHOD_CALL: return createMethodCall();
      case SimplejavaPackage.GENERIC_EXPRESSION: return createGenericExpression();
      case SimplejavaPackage.CONSTANT_EXPRESSION: return createConstantExpression();
      case SimplejavaPackage.NULL_EXPRESSION: return createNullExpression();
      case SimplejavaPackage.INTEGER_EXPRESSION: return createIntegerExpression();
      case SimplejavaPackage.BOOLEAN_EXPRESSION: return createBooleanExpression();
      case SimplejavaPackage.STRING_EXPRESSION: return createStringExpression();
      case SimplejavaPackage.UNARY_EXPRESSION: return createUnaryExpression();
      case SimplejavaPackage.VARIABLE_EXPRESSION: return createVariableExpression();
      case SimplejavaPackage.PARANTHESIS_OR_BINARY_EXPRESSION: return createParanthesisOrBinaryExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleJava createSimpleJava()
  {
    SimpleJavaImpl simpleJava = new SimpleJavaImpl();
    return simpleJava;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageDeclaration createPackageDeclaration()
  {
    PackageDeclarationImpl packageDeclaration = new PackageDeclarationImpl();
    return packageDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDeclaration createClassDeclaration()
  {
    ClassDeclarationImpl classDeclaration = new ClassDeclarationImpl();
    return classDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Method createMethod()
  {
    MethodImpl method = new MethodImpl();
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodBlock createMethodBlock()
  {
    MethodBlockImpl methodBlock = new MethodBlockImpl();
    return methodBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStatement createSimpleStatement()
  {
    SimpleStatementImpl simpleStatement = new SimpleStatementImpl();
    return simpleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleVariableDeclaration createSimpleVariableDeclaration()
  {
    SimpleVariableDeclarationImpl simpleVariableDeclaration = new SimpleVariableDeclarationImpl();
    return simpleVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForInStatement createForInStatement()
  {
    ForInStatementImpl forInStatement = new ForInStatementImpl();
    return forInStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileStatement createWhileStatement()
  {
    WhileStatementImpl whileStatement = new WhileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodCall createMethodCall()
  {
    MethodCallImpl methodCall = new MethodCallImpl();
    return methodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GenericExpression createGenericExpression()
  {
    GenericExpressionImpl genericExpression = new GenericExpressionImpl();
    return genericExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstantExpression createConstantExpression()
  {
    ConstantExpressionImpl constantExpression = new ConstantExpressionImpl();
    return constantExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NullExpression createNullExpression()
  {
    NullExpressionImpl nullExpression = new NullExpressionImpl();
    return nullExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegerExpression createIntegerExpression()
  {
    IntegerExpressionImpl integerExpression = new IntegerExpressionImpl();
    return integerExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExpression createBooleanExpression()
  {
    BooleanExpressionImpl booleanExpression = new BooleanExpressionImpl();
    return booleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringExpression createStringExpression()
  {
    StringExpressionImpl stringExpression = new StringExpressionImpl();
    return stringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableExpression createVariableExpression()
  {
    VariableExpressionImpl variableExpression = new VariableExpressionImpl();
    return variableExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParanthesisOrBinaryExpression createParanthesisOrBinaryExpression()
  {
    ParanthesisOrBinaryExpressionImpl paranthesisOrBinaryExpression = new ParanthesisOrBinaryExpressionImpl();
    return paranthesisOrBinaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimplejavaPackage getSimplejavaPackage()
  {
    return (SimplejavaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SimplejavaPackage getPackage()
  {
    return SimplejavaPackage.eINSTANCE;
  }

} //SimplejavaFactoryImpl
