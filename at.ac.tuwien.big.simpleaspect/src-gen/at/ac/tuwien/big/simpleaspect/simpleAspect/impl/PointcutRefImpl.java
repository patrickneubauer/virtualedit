/**
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.simpleaspect.simpleAspect.impl;

import at.ac.tuwien.big.simpleaspect.simpleAspect.Pointcut;
import at.ac.tuwien.big.simpleaspect.simpleAspect.PointcutRef;
import at.ac.tuwien.big.simpleaspect.simpleAspect.SimpleAspectPackage;
import at.ac.tuwien.big.simpleaspect.simpleAspect.VariableExpression;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pointcut Ref</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link at.ac.tuwien.big.simpleaspect.simpleAspect.impl.PointcutRefImpl#getPointcut <em>Pointcut</em>}</li>
 *   <li>{@link at.ac.tuwien.big.simpleaspect.simpleAspect.impl.PointcutRefImpl#getParameterValue <em>Parameter Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PointcutRefImpl extends MinimalEObjectImpl.Container implements PointcutRef
{
  /**
   * The cached value of the '{@link #getPointcut() <em>Pointcut</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPointcut()
   * @generated
   * @ordered
   */
  protected Pointcut pointcut;

  /**
   * The cached value of the '{@link #getParameterValue() <em>Parameter Value</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterValue()
   * @generated
   * @ordered
   */
  protected EList<VariableExpression> parameterValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PointcutRefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimpleAspectPackage.Literals.POINTCUT_REF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pointcut getPointcut()
  {
    if (pointcut != null && pointcut.eIsProxy())
    {
      InternalEObject oldPointcut = (InternalEObject)pointcut;
      pointcut = (Pointcut)eResolveProxy(oldPointcut);
      if (pointcut != oldPointcut)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SimpleAspectPackage.POINTCUT_REF__POINTCUT, oldPointcut, pointcut));
      }
    }
    return pointcut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pointcut basicGetPointcut()
  {
    return pointcut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPointcut(Pointcut newPointcut)
  {
    Pointcut oldPointcut = pointcut;
    pointcut = newPointcut;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleAspectPackage.POINTCUT_REF__POINTCUT, oldPointcut, pointcut));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VariableExpression> getParameterValue()
  {
    if (parameterValue == null)
    {
      parameterValue = new EObjectContainmentEList<VariableExpression>(VariableExpression.class, this, SimpleAspectPackage.POINTCUT_REF__PARAMETER_VALUE);
    }
    return parameterValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SimpleAspectPackage.POINTCUT_REF__PARAMETER_VALUE:
        return ((InternalEList<?>)getParameterValue()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimpleAspectPackage.POINTCUT_REF__POINTCUT:
        if (resolve) return getPointcut();
        return basicGetPointcut();
      case SimpleAspectPackage.POINTCUT_REF__PARAMETER_VALUE:
        return getParameterValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimpleAspectPackage.POINTCUT_REF__POINTCUT:
        setPointcut((Pointcut)newValue);
        return;
      case SimpleAspectPackage.POINTCUT_REF__PARAMETER_VALUE:
        getParameterValue().clear();
        getParameterValue().addAll((Collection<? extends VariableExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimpleAspectPackage.POINTCUT_REF__POINTCUT:
        setPointcut((Pointcut)null);
        return;
      case SimpleAspectPackage.POINTCUT_REF__PARAMETER_VALUE:
        getParameterValue().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimpleAspectPackage.POINTCUT_REF__POINTCUT:
        return pointcut != null;
      case SimpleAspectPackage.POINTCUT_REF__PARAMETER_VALUE:
        return parameterValue != null && !parameterValue.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PointcutRefImpl
