/*
 * generated by Xtext 2.11.0
 */
package at.ac.tuwien.big.ide.contentassist.antlr;

import at.ac.tuwien.big.ide.contentassist.antlr.internal.InternalSimplejavaParser;
import at.ac.tuwien.big.services.SimplejavaGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SimplejavaParser extends AbstractContentAssistParser {

	@Inject
	private SimplejavaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSimplejavaParser createParser() {
		InternalSimplejavaParser result = new InternalSimplejavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives_0(), "rule__Type__Alternatives_0");
					put(grammarAccess.getTypeAccess().getTypeNameAlternatives_0_0_0(), "rule__Type__TypeNameAlternatives_0_0_0");
					put(grammarAccess.getSimpleStatementAccess().getAlternatives(), "rule__SimpleStatement__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getMethodCallAccess().getAlternatives_0_0_0(), "rule__MethodCall__Alternatives_0_0_0");
					put(grammarAccess.getMethodCallAccess().getAlternatives_0_1(), "rule__MethodCall__Alternatives_0_1");
					put(grammarAccess.getMethodCallAccess().getMethodNameAlternatives_0_1_1_0(), "rule__MethodCall__MethodNameAlternatives_0_1_1_0");
					put(grammarAccess.getGenericExpressionAccess().getAlternatives(), "rule__GenericExpression__Alternatives");
					put(grammarAccess.getConstantExpressionAccess().getAlternatives(), "rule__ConstantExpression__Alternatives");
					put(grammarAccess.getBooleanExpressionAccess().getAlternatives_1(), "rule__BooleanExpression__Alternatives_1");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAlternatives_2_0_0(), "rule__ParanthesisOrBinaryExpression__TypeAlternatives_2_0_0");
					put(grammarAccess.getSimpleJavaAccess().getGroup(), "rule__SimpleJava__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup(), "rule__ClassDeclaration__Group__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup_4(), "rule__ClassDeclaration__Group_4__0");
					put(grammarAccess.getSimpleParameterAccess().getGroup(), "rule__SimpleParameter__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
					put(grammarAccess.getMethodAccess().getGroup_5_1(), "rule__Method__Group_5_1__0");
					put(grammarAccess.getMethodBlockAccess().getGroup(), "rule__MethodBlock__Group__0");
					put(grammarAccess.getMethodBlockAccess().getGroup_2(), "rule__MethodBlock__Group_2__0");
					put(grammarAccess.getStatementAccess().getGroup_8(), "rule__Statement__Group_8__0");
					put(grammarAccess.getSimpleVariableDeclarationAccess().getGroup(), "rule__SimpleVariableDeclaration__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_3(), "rule__IfStatement__Group_3__0");
					put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
					put(grammarAccess.getForInStatementAccess().getGroup(), "rule__ForInStatement__Group__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup_0(), "rule__MethodCall__Group_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_0_0(), "rule__MethodCall__Group_0_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2(), "rule__MethodCall__Group_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2_1(), "rule__MethodCall__Group_2_1__0");
					put(grammarAccess.getConstructorCallAccess().getGroup(), "rule__ConstructorCall__Group__0");
					put(grammarAccess.getConstructorCallAccess().getGroup_3(), "rule__ConstructorCall__Group_3__0");
					put(grammarAccess.getConstructorCallAccess().getGroup_3_1(), "rule__ConstructorCall__Group_3_1__0");
					put(grammarAccess.getNullExpressionAccess().getGroup(), "rule__NullExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup(), "rule__ParanthesisOrBinaryExpression__Group__0");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getGroup_2(), "rule__ParanthesisOrBinaryExpression__Group_2__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getSimpleJavaAccess().getPackageAssignment_0(), "rule__SimpleJava__PackageAssignment_0");
					put(grammarAccess.getSimpleJavaAccess().getImportsAssignment_1(), "rule__SimpleJava__ImportsAssignment_1");
					put(grammarAccess.getSimpleJavaAccess().getClazzAssignment_2(), "rule__SimpleJava__ClazzAssignment_2");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getImportAccess().getImportedAssignment_1(), "rule__Import__ImportedAssignment_1");
					put(grammarAccess.getClassDeclarationAccess().getNameAssignment_2(), "rule__ClassDeclaration__NameAssignment_2");
					put(grammarAccess.getClassDeclarationAccess().getAttributeAssignment_4_0(), "rule__ClassDeclaration__AttributeAssignment_4_0");
					put(grammarAccess.getClassDeclarationAccess().getMethodAssignment_5(), "rule__ClassDeclaration__MethodAssignment_5");
					put(grammarAccess.getSimpleParameterAccess().getTypeAssignment_0(), "rule__SimpleParameter__TypeAssignment_0");
					put(grammarAccess.getSimpleParameterAccess().getNameAssignment_1(), "rule__SimpleParameter__NameAssignment_1");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_0(), "rule__Attribute__TypeAssignment_0");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
					put(grammarAccess.getAttributeAccess().getExpressionAssignment_3(), "rule__Attribute__ExpressionAssignment_3");
					put(grammarAccess.getTypeAccess().getTypeNameAssignment_0_0(), "rule__Type__TypeNameAssignment_0_0");
					put(grammarAccess.getTypeAccess().getIsVoidAssignment_0_1(), "rule__Type__IsVoidAssignment_0_1");
					put(grammarAccess.getTypeAccess().getTypeRefAssignment_0_2(), "rule__Type__TypeRefAssignment_0_2");
					put(grammarAccess.getTypeAccess().getIsArrayAssignment_1(), "rule__Type__IsArrayAssignment_1");
					put(grammarAccess.getMethodAccess().getStaticAssignment_1(), "rule__Method__StaticAssignment_1");
					put(grammarAccess.getMethodAccess().getReturnTypeAssignment_2(), "rule__Method__ReturnTypeAssignment_2");
					put(grammarAccess.getMethodAccess().getNameAssignment_3(), "rule__Method__NameAssignment_3");
					put(grammarAccess.getMethodAccess().getParameterAssignment_5_0(), "rule__Method__ParameterAssignment_5_0");
					put(grammarAccess.getMethodAccess().getParameterAssignment_5_1_1(), "rule__Method__ParameterAssignment_5_1_1");
					put(grammarAccess.getMethodAccess().getContentAssignment_7(), "rule__Method__ContentAssignment_7");
					put(grammarAccess.getMethodBlockAccess().getGeneratedAssignment_1(), "rule__MethodBlock__GeneratedAssignment_1");
					put(grammarAccess.getMethodBlockAccess().getStatementsAssignment_2_1(), "rule__MethodBlock__StatementsAssignment_2_1");
					put(grammarAccess.getSimpleVariableDeclarationAccess().getParameterAssignment_1(), "rule__SimpleVariableDeclaration__ParameterAssignment_1");
					put(grammarAccess.getSimpleVariableDeclarationAccess().getExpressionAssignment_3(), "rule__SimpleVariableDeclaration__ExpressionAssignment_3");
					put(grammarAccess.getVariableDeclarationAccess().getParameterAssignment_0(), "rule__VariableDeclaration__ParameterAssignment_0");
					put(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_2(), "rule__VariableDeclaration__ExpressionAssignment_2");
					put(grammarAccess.getAssignmentAccess().getParameterAssignment_0(), "rule__Assignment__ParameterAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_1(), "rule__IfStatement__ConditionAssignment_1");
					put(grammarAccess.getIfStatementAccess().getThenAssignment_2(), "rule__IfStatement__ThenAssignment_2");
					put(grammarAccess.getIfStatementAccess().getElseAssignment_3_1(), "rule__IfStatement__ElseAssignment_3_1");
					put(grammarAccess.getForStatementAccess().getInitAssignment_2(), "rule__ForStatement__InitAssignment_2");
					put(grammarAccess.getForStatementAccess().getConditionAssignment_4(), "rule__ForStatement__ConditionAssignment_4");
					put(grammarAccess.getForStatementAccess().getContinuationAssignment_6(), "rule__ForStatement__ContinuationAssignment_6");
					put(grammarAccess.getForStatementAccess().getBodyAssignment_8(), "rule__ForStatement__BodyAssignment_8");
					put(grammarAccess.getForInStatementAccess().getSubparameterAssignment_2(), "rule__ForInStatement__SubparameterAssignment_2");
					put(grammarAccess.getForInStatementAccess().getExpressionAssignment_4(), "rule__ForInStatement__ExpressionAssignment_4");
					put(grammarAccess.getForInStatementAccess().getBodyAssignment_6(), "rule__ForInStatement__BodyAssignment_6");
					put(grammarAccess.getWhileStatementAccess().getConditionAssignment_1(), "rule__WhileStatement__ConditionAssignment_1");
					put(grammarAccess.getWhileStatementAccess().getBodyAssignment_2(), "rule__WhileStatement__BodyAssignment_2");
					put(grammarAccess.getReturnStatementAccess().getExpressionAssignment_1(), "rule__ReturnStatement__ExpressionAssignment_1");
					put(grammarAccess.getMethodCallAccess().getObjectAssignment_0_0_0_0(), "rule__MethodCall__ObjectAssignment_0_0_0_0");
					put(grammarAccess.getMethodCallAccess().getThisObjectAssignment_0_0_0_1(), "rule__MethodCall__ThisObjectAssignment_0_0_0_1");
					put(grammarAccess.getMethodCallAccess().getMethodAssignment_0_1_0(), "rule__MethodCall__MethodAssignment_0_1_0");
					put(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_1_1(), "rule__MethodCall__MethodNameAssignment_0_1_1");
					put(grammarAccess.getMethodCallAccess().getMethodNameAssignment_0_1_2(), "rule__MethodCall__MethodNameAssignment_0_1_2");
					put(grammarAccess.getMethodCallAccess().getParameterAssignment_2_0(), "rule__MethodCall__ParameterAssignment_2_0");
					put(grammarAccess.getMethodCallAccess().getParameterAssignment_2_1_1(), "rule__MethodCall__ParameterAssignment_2_1_1");
					put(grammarAccess.getConstructorCallAccess().getTypeAssignment_1(), "rule__ConstructorCall__TypeAssignment_1");
					put(grammarAccess.getConstructorCallAccess().getParameterAssignment_3_0(), "rule__ConstructorCall__ParameterAssignment_3_0");
					put(grammarAccess.getConstructorCallAccess().getParameterAssignment_3_1_1(), "rule__ConstructorCall__ParameterAssignment_3_1_1");
					put(grammarAccess.getIntegerExpressionAccess().getValueAssignment(), "rule__IntegerExpression__ValueAssignment");
					put(grammarAccess.getBooleanExpressionAccess().getValueAssignment_1_0(), "rule__BooleanExpression__ValueAssignment_1_0");
					put(grammarAccess.getStringExpressionAccess().getValueAssignment(), "rule__StringExpression__ValueAssignment");
					put(grammarAccess.getUnaryExpressionAccess().getTypeAssignment_0(), "rule__UnaryExpression__TypeAssignment_0");
					put(grammarAccess.getUnaryExpressionAccess().getSourceAssignment_1(), "rule__UnaryExpression__SourceAssignment_1");
					put(grammarAccess.getVariableExpressionAccess().getVariableAssignment(), "rule__VariableExpression__VariableAssignment");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getSourceAssignment_1(), "rule__ParanthesisOrBinaryExpression__SourceAssignment_1");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getTypeAssignment_2_0(), "rule__ParanthesisOrBinaryExpression__TypeAssignment_2_0");
					put(grammarAccess.getParanthesisOrBinaryExpressionAccess().getArgumentAssignment_2_1(), "rule__ParanthesisOrBinaryExpression__ArgumentAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimplejavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimplejavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
